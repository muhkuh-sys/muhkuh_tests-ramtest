# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2012 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Import all required objects.
#
Import('atEnv')


#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
sources_common = """
	src/header.c
	src/progress.c
	src/ramtest.c
	src/setup_sdram.c
"""

sources_arm_assembler = """
	src/performance_test.S
	src/ramtest_perf.c
	src/random_burst.s
"""

sources_test = """
	src/init_netx_test.S
	src/main_test.c
"""

sources_standalone = """
	src/init_standalone.S
	src/main_standalone.c
"""

sources_standalone_netx4000_cr7 = """
	src/netx4000/init_standalone_cr7.S
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
	src/ramtest_ecc.c
	src/ecc_ddr.c
"""

sources_standalone_netx4000_ca9 = """
	src/netx4000/init_standalone_ca9.S
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
	src/ramtest_ecc.c
	src/ecc_ddr.c
	src/ecc_a9.c
"""

sources_standalone_netx4000_cr7_cached = """
	src/netx4000/init_standalone_cr7_cache_enable.S
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
	src/ramtest_ecc.c
	src/ecc_ddr.c
"""

sources_standalone_netx4000_ca9_cached = """
	src/netx4000/CA9/ca9_init.S
	src/netx4000/CA9/v7a.S
	src/netx4000/CA9/mmu_s.S
	src/netx4000/CA9/MP_SCU.s
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
	src/ramtest_ecc.c
	src/ecc_ddr.c
	src/ecc_a9.c
"""

sources_standalone_netx4000_ca9_core0_1_cached = """
	src/netx4000/CA9/ca9_0_1_init.S
	src/netx4000/CA9/v7a.S
	src/netx4000/CA9/mmu_s.S
	src/netx4000/CA9/MP_SCU.s
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
	src/ramtest_ecc.c
	src/ecc_ddr.c
	src/ecc_a9.c
	src/ramtest_smp.c
	src/uart_wrapper.c
"""


sources_debugger = """
	src/init_debugger.S
	src/main_standalone.c
"""

sources_sim = """
	src/init_simu.S
	src/main_simu.c
	src/performance_test.S
	src/ramtest_perf.c
	src/setup_sdram.c
"""

# special files for netX 4000 bootup
sources_cr7_openfirewalls = """
	src/netx4000/cr7_open_netx4000_firewalls.S
"""

sources_cr7_init_cache = """
	src/netx4000/cr7_init_cache.s
"""

sources_ca9_init_cache = """
	src/netx4000/ca9_init_cache.S
"""

sources_cr7_sync_ca9 = """
	src/netx4000/cr7_sync_ca9.S
"""

# Defines Overview:
# ['CPU_CR7', '1']          main_standalone_netx4000: systime_init(); 
# ['CPU_CA9']               not checked
# ['CA9_NO_L2C_ENABLE']     do not enable L2C
# ['ECC'],                  check ECC flags during ramtest
# ['DDR_ECC']               enable DDR ECC checking
# ['CA9_L1C_ECC']           enable CA9 L1 ECC and CA9 L1 ECC checking
# ['ECC_TRIGGER']           trigger ECC error
# ['SMP']                   enable cache coherency tests
# ['WRAP_UART']             for SMP: use UART depending on CPU ID

#----------------------------------------------------------------------------
#
# Build the muhkuh test version.
#
aCppPath = ['src', '#platform/src', '#platform/src/lib', '#targets/version']


env_netx4000_t = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_t.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_t.Append(CPPPATH = aCppPath)
src_netx4000_t = env_netx4000_t.SetBuildPath('targets/netx4000/muhkuh_test', 'src', sources_common+sources_arm_assembler+sources_test)
elf_netx4000_t = env_netx4000_t.Elf('targets/netx4000/muhkuh_test/ramtest.elf', src_netx4000_t + env_netx4000_t['PLATFORM_LIBRARY'])
ramtest_netx4000 = env_netx4000_t.ObjCopy('targets/netx4000/muhkuh_test/ramtest_netx4000_relaxed.bin', elf_netx4000_t)

env_netx500_t = atEnv.NETX500.Clone()
env_netx500_t.Replace(LDFILE = 'src/netx500/netx500.ld')
env_netx500_t.Append(CPPPATH = aCppPath)
src_netx500_t = env_netx500_t.SetBuildPath('targets/netx500/muhkuh_test', 'src', sources_common+sources_arm_assembler+sources_test)
elf_netx500_t = env_netx500_t.Elf('targets/netx500/muhkuh_test/ramtest.elf', src_netx500_t + env_netx500_t['PLATFORM_LIBRARY'])
ramtest_netx500 = env_netx500_t.ObjCopy('targets/netx500/muhkuh_test/ramtest_netx500.bin', elf_netx500_t)

env_netx500_sim = atEnv.NETX500.Clone()
env_netx500_sim.Replace(LDFILE = 'src/netx500/netx500.ld')
env_netx500_sim.Append(CPPPATH = aCppPath)
env_netx500_sim.Append(CPPDEFINES = [['SIMULATION', '1']])
src_netx500_sim = env_netx500_sim.SetBuildPath('targets/netx500/sim', 'src',  sources_sim)
elf_netx500_sim = env_netx500_sim.Elf('targets/netx500/sim/ramtest_netx500.elf', src_netx500_sim + env_netx500_sim['PLATFORM_LIBRARY'])
ramtest_netx500_sim = env_netx500_sim.ObjCopy('targets/netx500/sim/ramtest_netx500.bin', elf_netx500_sim)

env_netx90_mpw_t = atEnv.NETX90_MPW.Clone()
env_netx90_mpw_t.Replace(LDFILE = 'src/netx90/netx90.ld')
env_netx90_mpw_t.Append(CPPPATH = aCppPath)
src_netx90_mpw_t = env_netx90_mpw_t.SetBuildPath('targets/netx90_mpw/muhkuh_test', 'src', sources_common+sources_test)
elf_netx90_mpw_t = env_netx90_mpw_t.Elf('targets/netx90_mpw/muhkuh_test/ramtest.elf', src_netx90_mpw_t + env_netx90_mpw_t['PLATFORM_LIBRARY'])
ramtest_netx90_mpw = env_netx90_mpw_t.ObjCopy('targets/netx90_mpw/muhkuh_test/ramtest_netx90_mpw.bin', elf_netx90_mpw_t)

env_netx56_t = atEnv.NETX56.Clone()
env_netx56_t.Replace(LDFILE = 'src/netx56/netx56.ld')
env_netx56_t.Append(CPPPATH = aCppPath)
src_netx56_t = env_netx56_t.SetBuildPath('targets/netx56/muhkuh_test', 'src', sources_common+sources_arm_assembler+sources_test)
elf_netx56_t = env_netx56_t.Elf('targets/netx56/muhkuh_test/ramtest.elf', src_netx56_t + env_netx56_t['PLATFORM_LIBRARY'])
ramtest_netx56 = env_netx56_t.ObjCopy('targets/netx56/muhkuh_test/ramtest_netx56.bin', elf_netx56_t)

env_netx50_t = atEnv.NETX50.Clone()
env_netx50_t.Replace(LDFILE = 'src/netx50/netx50.ld')
env_netx50_t.Append(CPPPATH = aCppPath)
src_netx50_t = env_netx50_t.SetBuildPath('targets/netx50/muhkuh_test', 'src', sources_common+sources_arm_assembler+sources_test)
elf_netx50_t = env_netx50_t.Elf('targets/netx50/muhkuh_test/ramtest.elf', src_netx50_t + env_netx50_t['PLATFORM_LIBRARY'])
ramtest_netx50 = env_netx50_t.ObjCopy('targets/netx50/muhkuh_test/ramtest_netx50.bin', elf_netx50_t)

env_netx10_t = atEnv.NETX10.Clone()
env_netx10_t.Replace(LDFILE = 'src/netx10/netx10.ld')
env_netx10_t.Append(CPPPATH = aCppPath)
src_netx10_t = env_netx10_t.SetBuildPath('targets/netx10/muhkuh_test', 'src', sources_common+sources_arm_assembler+sources_test)
elf_netx10_t = env_netx10_t.Elf('targets/netx10/muhkuh_test/ramtest.elf', src_netx10_t + env_netx10_t['PLATFORM_LIBRARY'])
ramtest_netx10 = env_netx10_t.ObjCopy('targets/netx10/muhkuh_test/ramtest_netx10.bin', elf_netx10_t)

Export('ramtest_netx4000', 'ramtest_netx500', 'ramtest_netx90_mpw', 'ramtest_netx56', 'ramtest_netx50', 'ramtest_netx10')




#----------------------------------------------------------------------------
#
# Build the standalone version. 
#
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# auxiliary routines
#----------------------------------------------------------------------------

# open firewalls on cr7
env_netx4000_cr7_openfirewalls = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_cr7_openfirewalls.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_cr7_openfirewalls.Append(CPPPATH = aCppPath)
src_netx4000_cr7_openfirewalls = env_netx4000_cr7_openfirewalls.SetBuildPath('targets/netx4000_openfirewalls', 'src', sources_cr7_openfirewalls)
elf_netx4000_cr7_openfirewalls = env_netx4000_cr7_openfirewalls.Elf('targets/netx4000_openfirewalls/netx4000_cr7_openfirewalls.elf', src_netx4000_cr7_openfirewalls)
txt_netx4000_cr7_openfirewalls = env_netx4000_cr7_openfirewalls.ObjDump('targets/netx4000_openfirewalls/netx4000_cr7_openfirewalls.txt', elf_netx4000_cr7_openfirewalls, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])

# enable caches and branch prediction on CR7
env_netx4000_cr7_init_cache = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_cr7_init_cache.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_cr7_init_cache.Append(CPPPATH = aCppPath)
src_netx4000_cr7_init_cache = env_netx4000_cr7_init_cache.SetBuildPath('targets/netx4000_cr7_init_cache', 'src', sources_cr7_init_cache)
elf_netx4000_cr7_init_cache = env_netx4000_cr7_init_cache.Elf(         'targets/netx4000_cr7_init_cache/netx4000_cr7_init_cache.elf', src_netx4000_cr7_init_cache)
txt_netx4000_cr7_init_cache = env_netx4000_cr7_init_cache.ObjDump(     'targets/netx4000_cr7_init_cache/netx4000_cr7_init_cache.txt', elf_netx4000_cr7_init_cache, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_cr7_init_cache = env_netx4000_cr7_init_cache.ObjCopy(     'targets/netx4000_cr7_init_cache/netx4000_cr7_init_cache.bin', elf_netx4000_cr7_init_cache)

# enable caches and branch prediction on CA9
# When done, overwrites CA9 firmware vector with 0x11UL 0x22UL. 
env_netx4000_ca9_init_cache = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_ca9_init_cache.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap0.ld')
env_netx4000_ca9_init_cache.Append(CPPPATH = aCppPath)
src_netx4000_ca9_init_cache = env_netx4000_ca9_init_cache.SetBuildPath('targets/netx4000_ca9_init_cache', 'src', sources_ca9_init_cache)
elf_netx4000_ca9_init_cache = env_netx4000_ca9_init_cache.Elf(         'targets/netx4000_ca9_init_cache/netx4000_ca9_init_cache.elf', src_netx4000_ca9_init_cache)
txt_netx4000_ca9_init_cache = env_netx4000_ca9_init_cache.ObjDump(     'targets/netx4000_ca9_init_cache/netx4000_ca9_init_cache.txt', elf_netx4000_ca9_init_cache, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_ca9_init_cache = env_netx4000_ca9_init_cache.ObjCopy(     'targets/netx4000_ca9_init_cache/netx4000_ca9_init_cache.bin', elf_netx4000_ca9_init_cache)

# Wait on CR7 for cache enable on CA9 to complete.
env_netx4000_cr7_sync_ca9 = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_cr7_sync_ca9.Replace(LDFILE = 'src/netx4000/netx4000_cr7_synca9.ld')
env_netx4000_cr7_sync_ca9.Append(CPPPATH = aCppPath)
src_netx4000_cr7_sync_ca9 = env_netx4000_cr7_sync_ca9.SetBuildPath('targets/netx4000_cr7_sync_ca9', 'src', sources_cr7_sync_ca9)
elf_netx4000_cr7_sync_ca9 = env_netx4000_cr7_sync_ca9.Elf(         'targets/netx4000_cr7_sync_ca9/netx4000_cr7_sync_ca9.elf', src_netx4000_cr7_sync_ca9)
txt_netx4000_cr7_sync_ca9 = env_netx4000_cr7_sync_ca9.ObjDump(     'targets/netx4000_cr7_sync_ca9/netx4000_cr7_sync_ca9.txt', elf_netx4000_cr7_sync_ca9, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_cr7_sync_ca9 = env_netx4000_cr7_sync_ca9.ObjCopy(     'targets/netx4000_cr7_sync_ca9/netx4000_cr7_sync_ca9.bin', elf_netx4000_cr7_sync_ca9)




#----------------------------------------------------------------------------
#  standalone ramtest
#  CR7: LLRAM
#  CA9: intram_rap0/1
#  no cache
#----------------------------------------------------------------------------

# ramtest for the CR7.
env_netx4000_s_cr7 = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_s_cr7.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_s_cr7.Append(CPPPATH = aCppPath)
env_netx4000_s_cr7.Append(CPPDEFINES = [['CPU_CR7', '1']])
src_netx4000_s_cr7 = env_netx4000_s_cr7.SetBuildPath('targets/netx4000_cr7', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7)
elf_netx4000_s_cr7 = env_netx4000_s_cr7.Elf(         'targets/netx4000_cr7/netx4000_ramtest_cr7.elf', src_netx4000_s_cr7 + env_netx4000_s_cr7['PLATFORM_LIBRARY'])
txt_netx4000_s_cr7 = env_netx4000_s_cr7.ObjDump(     'targets/netx4000_cr7/netx4000_ramtest_cr7.txt', elf_netx4000_s_cr7, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_cr7 = env_netx4000_s_cr7.ObjCopy(     'targets/netx4000_cr7/netx4000_ramtest_cr7.bin', elf_netx4000_s_cr7)

# ramtest for CA9 core 0.
env_netx4000_s_ca9_core0 = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_s_ca9_core0.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap0.ld')
env_netx4000_s_ca9_core0.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_core0.Append(CPPPATH = ['src/netx4000'])
env_netx4000_s_ca9_core0.Append(CPPDEFINES = [['CPU_CA9']])
src_netx4000_s_ca9_core0 = env_netx4000_s_ca9_core0.SetBuildPath('targets/netx4000_ca9_core0', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9)
elf_netx4000_s_ca9_core0 = env_netx4000_s_ca9_core0.Elf(         'targets/netx4000_ca9_core0/netx4000_ramtest_ca9_core0.elf', src_netx4000_s_ca9_core0 + env_netx4000_s_ca9_core0['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_core0 = env_netx4000_s_ca9_core0.ObjDump(     'targets/netx4000_ca9_core0/netx4000_ramtest_ca9_core0.txt', elf_netx4000_s_ca9_core0, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_core0 = env_netx4000_s_ca9_core0.ObjCopy(     'targets/netx4000_ca9_core0/netx4000_ramtest_ca9_core0.bin', elf_netx4000_s_ca9_core0)

# ramtest for CA9 core 1.
env_netx4000_s_ca9_core1 = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_s_ca9_core1.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap1.ld')
env_netx4000_s_ca9_core1.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_core1.Append(CPPPATH = ['src/netx4000'])
env_netx4000_s_ca9_core1.Append(CPPDEFINES = [['CPU_CA9', '1']])
src_netx4000_s_ca9_core1 = env_netx4000_s_ca9_core1.SetBuildPath('targets/netx4000_ca9_core1', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9)
elf_netx4000_s_ca9_core1 = env_netx4000_s_ca9_core1.Elf(         'targets/netx4000_ca9_core1/netx4000_ramtest_ca9_core1.elf', src_netx4000_s_ca9_core1 + env_netx4000_s_ca9_core1['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_core1 = env_netx4000_s_ca9_core1.ObjDump(     'targets/netx4000_ca9_core1/netx4000_ramtest_ca9_core1.txt', elf_netx4000_s_ca9_core1, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_core1 = env_netx4000_s_ca9_core1.ObjCopy(     'targets/netx4000_ca9_core1/netx4000_ramtest_ca9_core1.bin', elf_netx4000_s_ca9_core1)


#----------------------------------------------------------------------------
# standalone ramtest 
#  CR7  LLRAM           L1C
#  CA9  RAP intram 0    L1C
#  CA9  RAP intram 1    L1C
#  CA9  RAP intram 0    L2C
#----------------------------------------------------------------------------


# ramtest for the CR7, cache is enabled in init.s
env_netx4000_s_cr7_cached = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_s_cr7_cached.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_s_cr7_cached.Append(CPPPATH = aCppPath)
env_netx4000_s_cr7_cached.Append(CPPDEFINES = [['CPU_CR7', '1']])
src_netx4000_s_cr7_cached = env_netx4000_s_cr7_cached.SetBuildPath('targets/netx4000_cr7_cached', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7_cached)
elf_netx4000_s_cr7_cached = env_netx4000_s_cr7_cached.Elf(         'targets/netx4000_cr7_cached/netx4000_ramtest_cr7_cached.elf', src_netx4000_s_cr7_cached + env_netx4000_s_cr7_cached['PLATFORM_LIBRARY'])
txt_netx4000_s_cr7_cached = env_netx4000_s_cr7_cached.ObjDump(     'targets/netx4000_cr7_cached/netx4000_ramtest_cr7_cached.txt', elf_netx4000_s_cr7_cached, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_cr7_cached = env_netx4000_s_cr7_cached.ObjCopy(     'targets/netx4000_cr7_cached/netx4000_ramtest_cr7_cached.bin', elf_netx4000_s_cr7_cached)

# ramtest for CA9 core 0, l1 cache is enabled in ca9_init.S
env_netx4000_s_ca9_core0_cached = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_s_ca9_core0_cached.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap0.ld')
env_netx4000_s_ca9_core0_cached.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_core0_cached.Append(CPPPATH = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000'])
env_netx4000_s_ca9_core0_cached.Append(CPPDEFINES = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE']])
src_netx4000_s_ca9_core0_cached = env_netx4000_s_ca9_core0_cached.SetBuildPath('targets/netx4000_ca9_core0_cached', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached)
elf_netx4000_s_ca9_core0_cached = env_netx4000_s_ca9_core0_cached.Elf(         'targets/netx4000_ca9_core0_cached/netx4000_ramtest_ca9_core0_cached.elf', src_netx4000_s_ca9_core0_cached + env_netx4000_s_ca9_core0_cached['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_core0_cached = env_netx4000_s_ca9_core0_cached.ObjDump(     'targets/netx4000_ca9_core0_cached/netx4000_ramtest_ca9_core0_cached.txt', elf_netx4000_s_ca9_core0_cached, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_core0_cached = env_netx4000_s_ca9_core0_cached.ObjCopy(     'targets/netx4000_ca9_core0_cached/netx4000_ramtest_ca9_core0_cached.bin', elf_netx4000_s_ca9_core0_cached)

# ramtest for CA9 core 1, l1 cache is enabled in ca9_init.s
env_netx4000_s_ca9_core1_cached = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_s_ca9_core1_cached.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap1.ld')
env_netx4000_s_ca9_core1_cached.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_core1_cached.Append(CPPPATH = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000'])
env_netx4000_s_ca9_core1_cached.Append(CPPDEFINES = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE']])
src_netx4000_s_ca9_core1_cached = env_netx4000_s_ca9_core1_cached.SetBuildPath('targets/netx4000_ca9_core1_cached', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached)
elf_netx4000_s_ca9_core1_cached = env_netx4000_s_ca9_core1_cached.Elf(         'targets/netx4000_ca9_core1_cached/netx4000_ramtest_ca9_core1_cached.elf', src_netx4000_s_ca9_core1_cached + env_netx4000_s_ca9_core1_cached['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_core1_cached = env_netx4000_s_ca9_core1_cached.ObjDump(     'targets/netx4000_ca9_core1_cached/netx4000_ramtest_ca9_core1_cached.txt', elf_netx4000_s_ca9_core1_cached, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_core1_cached = env_netx4000_s_ca9_core1_cached.ObjCopy(     'targets/netx4000_ca9_core1_cached/netx4000_ramtest_ca9_core1_cached.bin', elf_netx4000_s_ca9_core1_cached)

# ramtest for CA9 core 0, L1+L2 caches are enabled in ca9_init.s
env_netx4000_s_ca9_core0_cached_l2 = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_s_ca9_core0_cached_l2.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap0.ld')
env_netx4000_s_ca9_core0_cached_l2.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_core0_cached_l2.Append(CPPPATH = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000'])
env_netx4000_s_ca9_core0_cached_l2.Append(CPPDEFINES = [['CPU_CA9']])
src_netx4000_s_ca9_core0_cached_l2 = env_netx4000_s_ca9_core0_cached_l2.SetBuildPath('targets/netx4000_ca9_core0_cached_l2', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached)
elf_netx4000_s_ca9_core0_cached_l2 = env_netx4000_s_ca9_core0_cached_l2.Elf(         'targets/netx4000_ca9_core0_cached_l2/netx4000_ramtest_ca9_core0_cached_l2.elf', src_netx4000_s_ca9_core0_cached_l2 + env_netx4000_s_ca9_core0_cached_l2['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_core0_cached_l2 = env_netx4000_s_ca9_core0_cached_l2.ObjDump(     'targets/netx4000_ca9_core0_cached_l2/netx4000_ramtest_ca9_core0_cached_l2.txt', elf_netx4000_s_ca9_core0_cached_l2, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_core0_cached_l2 = env_netx4000_s_ca9_core0_cached.ObjCopy(     'targets/netx4000_ca9_core0_cached_l2/netx4000_ramtest_ca9_core0_cached_l2.bin', elf_netx4000_s_ca9_core0_cached_l2)



#----------------------------------------------------------------------------
# Standalone RAM test
#  CR7 netx intram 0 L1C
#  CA9 rap intram 2  L2C
#  CA9 rap intram 2  L1C
#  CA9 rap intram 3  L1C
#----------------------------------------------------------------------------

# ramtest for the CR7 in netx intram 0 (05080000-0509ffff), cache is enabled in init.s
env_netx4000_s_cr7_netx_intram_cached = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_s_cr7_netx_intram_cached.Replace(LDFILE = 'src/netx4000/netx4000_cr7_netx_intram0.ld')
env_netx4000_s_cr7_netx_intram_cached.Append(CPPPATH = aCppPath)
env_netx4000_s_cr7_netx_intram_cached.Append(CPPDEFINES = [['CPU_CR7', '1']])
src_netx4000_s_cr7_netx_intram_cached = env_netx4000_s_cr7_netx_intram_cached.SetBuildPath('targets/netx4000_cr7_netx_intram_cached', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7_cached)
elf_netx4000_s_cr7_netx_intram_cached = env_netx4000_s_cr7_netx_intram_cached.Elf(         'targets/netx4000_cr7_netx_intram_cached/netx4000_ramtest_cr7_netx_intram_cached.elf', src_netx4000_s_cr7_netx_intram_cached + env_netx4000_s_cr7_netx_intram_cached['PLATFORM_LIBRARY'])
txt_netx4000_s_cr7_netx_intram_cached = env_netx4000_s_cr7_netx_intram_cached.ObjDump(     'targets/netx4000_cr7_netx_intram_cached/netx4000_ramtest_cr7_netx_intram_cached.txt', elf_netx4000_s_cr7_netx_intram_cached, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_cr7_netx_intram_cached = env_netx4000_s_cr7_netx_intram_cached.ObjCopy(     'targets/netx4000_cr7_netx_intram_cached/netx4000_ramtest_cr7_netx_intram_cached.bin', elf_netx4000_s_cr7_netx_intram_cached)

# ramtest for CA9 in intram_rap2, L1+L2 caches are enabled in ca9_init.s
env_netx4000_s_ca9_intram_rap2_cached_l2 = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_s_ca9_intram_rap2_cached_l2.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap2.ld')
env_netx4000_s_ca9_intram_rap2_cached_l2.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_intram_rap2_cached_l2.Append(CPPPATH = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000'])
env_netx4000_s_ca9_intram_rap2_cached_l2.Append(CPPDEFINES = [['CPU_CA9']])
src_netx4000_s_ca9_intram_rap2_cached_l2 = env_netx4000_s_ca9_intram_rap2_cached_l2.SetBuildPath('targets/netx4000_ca9_intram_rap2_cached_l2', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached)
elf_netx4000_s_ca9_intram_rap2_cached_l2 = env_netx4000_s_ca9_intram_rap2_cached_l2.Elf(         'targets/netx4000_ca9_intram_rap2_cached_l2/netx4000_ramtest_ca9_intram_rap2_cached_l2.elf', src_netx4000_s_ca9_intram_rap2_cached_l2 + env_netx4000_s_ca9_intram_rap2_cached_l2['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_intram_rap2_cached_l2 = env_netx4000_s_ca9_intram_rap2_cached_l2.ObjDump(     'targets/netx4000_ca9_intram_rap2_cached_l2/netx4000_ramtest_ca9_intram_rap2_cached_l2.txt', elf_netx4000_s_ca9_intram_rap2_cached_l2, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_intram_rap2_cached_l2 = env_netx4000_s_ca9_intram_rap2_cached_l2.ObjCopy(     'targets/netx4000_ca9_intram_rap2_cached_l2/netx4000_ramtest_ca9_intram_rap2_cached_l2.bin', elf_netx4000_s_ca9_intram_rap2_cached_l2)


# ramtest for CA9 in intram_rap2, L1 cache is enabled in ca9_init.s
env_netx4000_s_ca9_intram_rap2_cached = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_s_ca9_intram_rap2_cached.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap2.ld')
env_netx4000_s_ca9_intram_rap2_cached.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_intram_rap2_cached.Append(CPPPATH = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000'])
env_netx4000_s_ca9_intram_rap2_cached.Append(CPPDEFINES = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE']])
src_netx4000_s_ca9_intram_rap2_cached = env_netx4000_s_ca9_intram_rap2_cached.SetBuildPath('targets/netx4000_ca9_intram_rap2_cached', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached)
elf_netx4000_s_ca9_intram_rap2_cached = env_netx4000_s_ca9_intram_rap2_cached.Elf(         'targets/netx4000_ca9_intram_rap2_cached/netx4000_ramtest_ca9_intram_rap2_cached.elf', src_netx4000_s_ca9_intram_rap2_cached + env_netx4000_s_ca9_intram_rap2_cached['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_intram_rap2_cached = env_netx4000_s_ca9_intram_rap2_cached.ObjDump(     'targets/netx4000_ca9_intram_rap2_cached/netx4000_ramtest_ca9_intram_rap2_cached.txt', elf_netx4000_s_ca9_intram_rap2_cached, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_intram_rap2_cached = env_netx4000_s_ca9_intram_rap2_cached.ObjCopy(     'targets/netx4000_ca9_intram_rap2_cached/netx4000_ramtest_ca9_intram_rap2_cached.bin', elf_netx4000_s_ca9_intram_rap2_cached)


# ramtest for CA9 in intram_rap3, l1 cache is enabled in ca9_init.s
env_netx4000_s_ca9_intram_rap3_cached = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_s_ca9_intram_rap3_cached.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap3.ld')
env_netx4000_s_ca9_intram_rap3_cached.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_intram_rap3_cached.Append(CPPPATH = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000'])
env_netx4000_s_ca9_intram_rap3_cached.Append(CPPDEFINES = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE']])
src_netx4000_s_ca9_intram_rap3_cached = env_netx4000_s_ca9_intram_rap3_cached.SetBuildPath('targets/netx4000_ca9_intram_rap3_cached', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached)
elf_netx4000_s_ca9_intram_rap3_cached = env_netx4000_s_ca9_intram_rap3_cached.Elf(         'targets/netx4000_ca9_intram_rap3_cached/netx4000_ramtest_ca9_intram_rap3_cached.elf', src_netx4000_s_ca9_intram_rap3_cached + env_netx4000_s_ca9_intram_rap3_cached['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_intram_rap3_cached = env_netx4000_s_ca9_intram_rap3_cached.ObjDump(     'targets/netx4000_ca9_intram_rap3_cached/netx4000_ramtest_ca9_intram_rap3_cached.txt', elf_netx4000_s_ca9_intram_rap3_cached, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_intram_rap3_cached = env_netx4000_s_ca9_intram_rap3_cached.ObjCopy(     'targets/netx4000_ca9_intram_rap3_cached/netx4000_ramtest_ca9_intram_rap3_cached.bin', elf_netx4000_s_ca9_intram_rap3_cached)





#############################################################################################################
#############################################################################################################


def build_elf_bin(pars):
	target_path = pars.target_dir + '/' + pars.target_name
	env = pars.env.Clone()
	env.Replace(LDFILE = pars.ldfile)
	env.Append(CPPPATH = aCppPath)
	env.Append(CPPPATH = pars.cpppath)
	env.Append(CPPDEFINES = pars.defines)
	src = env.SetBuildPath(pars.target_dir, 'src', pars.sources)
	elf = env.Elf(    target_path + '.elf', src + env['PLATFORM_LIBRARY'])
	txt = env.ObjDump(target_path + '.txt', elf, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
	bin = env.ObjCopy(target_path + '.bin', elf)
	return elf, bin

class buildpars:
	env         = atEnv.NETX4000_RELAXED
	cpppath     = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000']


def make_bootimage(pars):
	d = dict()
	for k, v in pars.HBOOTIMAGE_KNOWN_FILES.items():
		d[k] = v[0]
		
	bootimg = pars.env.HBootImage(
		pars.target_dir + '/' + pars.target_name,
		pars.xml_template,
		HBOOTIMAGE_KNOWN_FILES = d,
		HBOOTIMAGE_SNIPLIB_SEARCHPATHS = pars.HBOOTIMAGE_SNIPLIB_SEARCHPATHS,
		HBOOTIMAGE_INCLUDE_PATHS = pars.HBOOTIMAGE_INCLUDE_PATHS,
		HBOOTIMAGE_DEFINES = pars.HBOOTIMAGE_DEFINES
		#HBOOTIMAGE_VERBOSE = True
		)
	for v in pars.HBOOTIMAGE_KNOWN_FILES.values():
		pars.env.Depends(bootimg, v)
	return bootimg


class imgpars:
	env = env_netx4000_s_cr7
	target_dir = 'targets/netx4000/standalone'
	HBOOTIMAGE_SNIPLIB_SEARCHPATHS=['ramtest/src/sniplib']
	HBOOTIMAGE_INCLUDE_PATHS=['ramtest/src/hboot']
	HBOOTIMAGE_DEFINES={'TEST_CASES': 0x000001ff}
	

	
#############################################################################################################
# 
#############################################################################################################

# ramtest for CA9 in intram_rap0 with L1, cache, L1C ECC and DDR ECC 
buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached
buildpars.defines     = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE'], ['ECC'], ['DDR_ECC'], ['CA9_L1C_ECC'], ['ECC_TRIGGER']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap0.ld'
buildpars.target_dir  = 'targets/netx4000_ca9_intram_rap0_cl1_ecc'
buildpars.target_name = 'netx4000_ramtest_ca9_intram_rap0_cl1_ecc'
elf_netx4000_s_intram_rap0_ca9_l1c_ecc = build_elf_bin(buildpars)


# ramtest for CA9 core 0/1 both in intram_rap0 with L1, cache, L1C ECC 
buildpars.sources     = sources_common+sources_arm_assembler+ sources_standalone_netx4000_ca9_core0_1_cached
buildpars.defines     = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE'], ['ECC'], ['CA9_L1C_ECC'], ['ECC_TRIGGER'], ['SMP'], ['WRAP_UART']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap0_1.ld'
buildpars.target_dir  = 'targets/netx4000_ca9core01_intram_rap0_cl1_ecc'
buildpars.target_name = 'netx4000_ramtest_ca9core01_intram_rap0_cl1_ecc'
elf_netx4000_s_intram_rap0_1_ca9core0_1_l1c_ecc_smp = build_elf_bin(buildpars)


# image running on CA9 core 0 L1C, ECC, code: intram_rap0, test: ddr3 at 600 MHz 
imgpars.target_name = 'ramtest_standalone_nxhx4000_code_intram_rap0_test_ddr3_600_ca9_core0_l1c_ecc.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CA9core0_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCA9core0'        : elf_netx4000_s_intram_rap0_ca9_l1c_ecc
	})
make_bootimage(imgpars)

# CA9/L1C coherency tests
# CPU: CA9 core 0/1, L1C, ECC, SMP
# code running in RAP Intram 0 on both CPUs with heap/stack on RAP intram0/1
imgpars.target_name = 'ramtest_standalone_nxhx4000_code_rap_intram0_1_test_rap_intram_32k_ca9_core0_1_l1c_ecc_smp.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CA9core0_1_to_INTRAM_nxhx4000_rap_intram_32k.xml'
imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCA9core0_1'      : elf_netx4000_s_intram_rap0_1_ca9core0_1_l1c_ecc_smp
	})
make_bootimage(imgpars)

#############################################################################################################
# Intram test
#############################################################################################################

# CR7 in netx intram 0 (05080000-0509ffff) uncached
buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7
buildpars.defines     = [['CPU_CR7', '1']]
buildpars.ldfile      = 'src/netx4000/netx4000_cr7_netx_intram0.ld'
buildpars.target_dir  = 'targets/netx4000_cr7_intram_netx0'
buildpars.target_name = 'netx4000_ramtest_cr7_intram_netx0'
elf_netx4000_s_cr7_intram_netx0 = build_elf_bin(buildpars)

# CA9 in RAP intram 2 uncached
buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9
buildpars.defines     = [['CPU_CA9']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap2.ld'
buildpars.target_dir  = 'targets/netx4000_ca9_intram_rap2'
buildpars.target_name = 'netx4000_ramtest_ca9_intram_rap2'
elf_netx4000_s_ca9_intram_rap2 = build_elf_bin(buildpars)

# CA9 in RAP intram 3 uncached
buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9
buildpars.defines     = [['CPU_CA9']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap3.ld'
buildpars.target_dir  = 'targets/netx4000_ca9_intram_rap3'
buildpars.target_name = 'netx4000_ramtest_ca9_intram_rap3'
elf_netx4000_s_ca9_intram_rap3 = build_elf_bin(buildpars)


# NXHX 4000 intram test, CR7 uncached
imgpars.target_name = 'test_intram/ramtest_standalone_nxhx4000_intrams_cr7.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CR7_to_INTRAM_nxhx4000_intrams.xml'
imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7'             : elf_netx4000_s_cr7,
	'tElfCR7_netx_intram' : elf_netx4000_s_cr7_intram_netx0
	})
make_bootimage(imgpars)


# NXHX 4000 intram test, CA9 without caching (test is performed in small blocks).
imgpars.target_name = 'test_intram/ramtest_standalone_nxhx4000_intrams_ca9.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CA9_to_INTRAM_nxhx4000_intrams.xml'
imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCA9core0'        : elf_netx4000_s_ca9_core0,
	'tElfCA9core1'        : elf_netx4000_s_ca9_core1,
	'tElfCA9core0_rap2'   : elf_netx4000_s_ca9_intram_rap2,
	'tElfCA9core1_rap3'   : elf_netx4000_s_ca9_intram_rap3,
	'tElfCR7SyncA9'       : elf_netx4000_cr7_sync_ca9
	})
make_bootimage(imgpars)



#############################################################################################################
# DDR Test 
#############################################################################################################

# CR7 with L1 cache, CA9 with L1/2 cache
# 16 bit/32 bit/32 bit ECC with 400 and 600 MHz
imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCR7'             : elf_netx4000_s_cr7_cached,
	'tElfCA9core0'        : elf_netx4000_s_ca9_core0_cached_l2,
	'tElfCA9core1'        : elf_netx4000_s_ca9_core1_cached
	})

	
aDDRTests = (
('400MHz_noECC_cr7_cached',               'CR7_to_INTRAM_nxhx4000_ddr3_400MHz_noECC.xml'),
('600MHz_noECC_cr7_cached',               'CR7_to_INTRAM_nxhx4000_ddr3_600MHz_noECC.xml'),
('400MHz_noECC_HalfDP_cr7_cached',        'CR7_to_INTRAM_nxhx4000_ddr3_400MHz_noECC_HalfDP.xml'),
('600MHz_noECC_HalfDP_cr7_cached',        'CR7_to_INTRAM_nxhx4000_ddr3_600MHz_noECC_HalfDP.xml'),
('400MHz_noECC_ca9_cached_l2',            'CA9_to_INTRAM_nxhx4000_ddr3_400MHz_noECC.xml'),
('600MHz_noECC_ca9_cached_l2',            'CA9_to_INTRAM_nxhx4000_ddr3_600MHz_noECC.xml'),
('400MHz_noECC_HalfDP_ca9_cached_l2',     'CA9_to_INTRAM_nxhx4000_ddr3_400MHz_noECC_HalfDP.xml'),
('600MHz_noECC_HalfDP_ca9_cached_l2',     'CA9_to_INTRAM_nxhx4000_ddr3_600MHz_noECC_HalfDP.xml'),
('400MHz_noECC_cr7_ca9_cached_l2',        'CR7_CA9_to_INTRAM_nxhx4000_ddr3_400MHz_noECC.xml'),
('600MHz_noECC_cr7_ca9_cached_l2',        'CR7_CA9_to_INTRAM_nxhx4000_ddr3_600MHz_noECC.xml'),
('400MHz_noECC_HalfDP_cr7_ca9_cached_l2', 'CR7_CA9_to_INTRAM_nxhx4000_ddr3_400MHz_noECC_HalfDP.xml'),
('600MHz_noECC_HalfDP_cr7_ca9_cached_l2', 'CR7_CA9_to_INTRAM_nxhx4000_ddr3_600MHz_noECC_HalfDP.xml'),
)

for tEntry in aDDRTests:
	imgpars.target_name = 'test_ddr/ramtest_standalone_nxhx4000_ddr3_%s.bin' % tEntry[0]
	imgpars.xml_template = 'src/netx4000/nxhx4000/%s' % tEntry[1]
	print imgpars.xml_template, " ==> ", imgpars.target_name
	make_bootimage(imgpars)


# DDR/A9 L1C ECC 
#----------------------------------------------------------------------------
# standalone ramtest with ECC checking
#  CR7  LLRAM                L1C
#  CA9  RAP intram 0         L2C
#  CA9  RAP intram 1         L1C
#  CA9  RAP intram 0/1 (SMP) L2C
#----------------------------------------------------------------------------

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7_cached
buildpars.defines     = [['CPU_CR7', '1'],                   ['ECC'], ['DDR_ECC']]
buildpars.ldfile      = 'src/netx4000/netx4000_cr7_llram.ld'
buildpars.target_dir  = 'targets/netx4000_cr7_llram_l1c_ecc'
buildpars.target_name = 'netx4000_ramtest_cr7_llram_l1c_ecc'
elf_netx4000_s_cr7_llram_l1c_ecc = build_elf_bin(buildpars)

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached
buildpars.defines     = [['CPU_CA9'],                        ['ECC'], ['CA9_L1C_ECC'], ['DDR_ECC']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap0.ld'
buildpars.target_dir  = 'targets/netx4000_ca9_intram_rap0_l2c_ecc'
buildpars.target_name = 'netx4000_ramtest_ca9_intram_rap0_l2c_ecc'
elf_netx4000_s_ca9_intram_rap0_l2c_ecc = build_elf_bin(buildpars)

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached
buildpars.defines     = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE'], ['ECC'], ['CA9_L1C_ECC'], ['DDR_ECC']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap1.ld'
buildpars.target_dir  = 'targets/netx4000_ca9_intram_rap1_l1c_ecc'
buildpars.target_name = 'netx4000_ramtest_ca9_intram_rap1_l1c_ecc'
elf_netx4000_s_ca9_intram_rap1_l1c_ecc = build_elf_bin(buildpars)

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_core0_1_cached
buildpars.defines     = [['CPU_CA9'], ['SMP'], ['WRAP_UART'], ['ECC'], ['CA9_L1C_ECC'], ['DDR_ECC']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap0_1.ld'
buildpars.target_dir  = 'targets/netx4000_ca9_intram_rap0_1_smp_l2c_ecc'
buildpars.target_name = 'netx4000_ramtest_ca9_intram_rap0_1_smp_l2c_ecc'
elf_netx4000_s_ca9_rap_intram0_1_smp_l2c_ecc = build_elf_bin(buildpars)


imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCR7'             : elf_netx4000_s_cr7_llram_l1c_ecc,
	'tElfCA9core0'        : elf_netx4000_s_ca9_intram_rap0_l2c_ecc,
	'tElfCA9core1'        : elf_netx4000_s_ca9_intram_rap1_l1c_ecc
	})
	
aDDRTests = (
('400MHz_ECC_cr7_cached',        'CR7_to_INTRAM_nxhx4000_ddr3_400MHz.xml'),
('600MHz_ECC_cr7_cached',        'CR7_to_INTRAM_nxhx4000_ddr3_600MHz.xml'),
('400MHz_ECC_ca9_cached_l2',     'CA9_to_INTRAM_nxhx4000_ddr3_400MHz.xml'),
('600MHz_ECC_ca9_cached_l2',     'CA9_to_INTRAM_nxhx4000_ddr3_600MHz.xml'),
('400MHz_ECC_cr7_ca9_cached_l2', 'CR7_CA9_to_INTRAM_nxhx4000_ddr3_400MHz.xml'),
('600MHz_ECC_cr7_ca9_cached_l2', 'CR7_CA9_to_INTRAM_nxhx4000_ddr3_600MHz.xml'),
)

for tEntry in aDDRTests:
	imgpars.target_name = 'test_ddr/ramtest_standalone_nxhx4000_ddr3_%s.bin' % tEntry[0]
	imgpars.xml_template = 'src/netx4000/nxhx4000/%s' % tEntry[1]
	print imgpars.xml_template, " ==> ", imgpars.target_name
	make_bootimage(imgpars)


imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCR7'             : elf_netx4000_s_cr7_llram_l1c_ecc,
	'tElfCA9core0'        : elf_netx4000_s_ca9_rap_intram0_1_smp_l2c_ecc,
	'tElfCA9core1'        : elf_netx4000_s_ca9_rap_intram0_1_smp_l2c_ecc
	})
imgpars.target_name = 'test_ddr/ramtest_standalone_nxhx4000_ddr3_600MHz_ECC_cr7_ca9_smp_cached_l2.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CR7_CA9_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
imgpars.HBOOTIMAGE_DEFINES={'TEST_CASES': 0x000301ff}
make_bootimage(imgpars)
imgpars.target_name = 'test_ddr/ramtest_standalone_nxhx4000_ddr3_400MHz_ECC_cr7_ca9_smp_cached_l2.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CR7_CA9_to_INTRAM_nxhx4000_ddr3_400MHz.xml'
make_bootimage(imgpars)
imgpars.HBOOTIMAGE_DEFINES={'TEST_CASES': 0x000001ff}


#############################################################################################################
# DDR/A9 L1C ECC Trigger Test
#############################################################################################################

#----------------------------------------------------------------------------
# Standalone RAM test with DDR ECC trigger
#  CR7  LLRAM            uncached 
#  CR7  LLRAM              L1C    
#  CA9 core 0 RAP_Intram0  L1C 
#  CA9 core 1 RAP_Intram0  L2C
#----------------------------------------------------------------------------

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7
buildpars.defines     = [['CPU_CR7', '1'],                    ['ECC'], ['DDR_ECC'], ['ECC_TRIGGER']]
buildpars.ldfile      = 'src/netx4000/netx4000_cr7_llram.ld'
buildpars.target_dir  = 'targets/netx4000_cr7_ecc_trigger'
buildpars.target_name = 'netx4000_ramtest_cr7_ecc_trigger'
elf_netx4000_s_llram_cr7_ecc_trigger = build_elf_bin(buildpars)

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7_cached
buildpars.defines     = [['CPU_CR7', '1'],                    ['ECC'], ['DDR_ECC'], ['ECC_TRIGGER']]
buildpars.ldfile      = 'src/netx4000/netx4000_cr7_llram.ld'
buildpars.target_dir  = 'targets/netx4000_cr7_l1c_ecc_trigger'
buildpars.target_name = 'netx4000_ramtest_cr7_l1c_ecc_trigger'
elf_netx4000_s_llram_cr7_l1c_ecc_trigger = build_elf_bin(buildpars)

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached
buildpars.defines     = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE'] , ['ECC'], ['CA9_L1C_ECC'], ['DDR_ECC'], ['ECC_TRIGGER']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap0.ld'
buildpars.target_dir  = 'targets/netx4000_ca9_intram_rap0_l1c_ecc_trigger'
buildpars.target_name = 'netx4000_ramtest_ca9_intram_rap0_l1c_ecc_trigger'
elf_netx4000_s_ca9_intram_rap0_l1c_ecc_trigger = build_elf_bin(buildpars)

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached
buildpars.defines     = [['CPU_CA9'],                         ['ECC'], ['CA9_L1C_ECC'], ['DDR_ECC'], ['ECC_TRIGGER']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap0.ld'
buildpars.target_dir  = 'targets/netx4000_ca9_intram_rap0_l2c_ecc_trigger'
buildpars.target_name = 'netx4000_ramtest_ca9_intram_rap0_l2c_ecc_trigger'
elf_netx4000_s_ca9_intram_rap0_l2c_ecc_trigger = build_elf_bin(buildpars)


# ECC test
# Trigger an ECC error on CR7.
# Variants:
# CR7 + CA9 and CR7 only
# CR7 with/without cache
imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCR7'             : elf_netx4000_s_llram_cr7_ecc_trigger,
	'tElfCA9core0'        : elf_netx4000_s_ca9_core0_cached_l2,
	'tElfCA9core1'        : elf_netx4000_s_ca9_core1_cached
	})
imgpars.target_name = 'test_ecc/ramtest_standalone_nxhx4000_ddr3_600MHz_ECC_trigger_cr7_ca9_cached.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CR7_CA9_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)
imgpars.target_name = 'test_ecc/ramtest_standalone_nxhx4000_ddr3_600MHz_cr7_ECC_trigger.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CR7_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)


imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCR7'             : elf_netx4000_s_llram_cr7_l1c_ecc_trigger,
	'tElfCA9core0'        : elf_netx4000_s_ca9_core0_cached_l2,
	'tElfCA9core1'        : elf_netx4000_s_ca9_core1_cached
	})
imgpars.target_name = 'test_ecc/ramtest_standalone_nxhx4000_ddr3_600MHz_ECC_trigger_cr7_cached_ca9_cached.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CR7_CA9_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)
imgpars.target_name = 'test_ecc/ramtest_standalone_nxhx4000_ddr3_600MHz_cr7_l1c_ECC_trigger.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CR7_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)


imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCA9core0'        : elf_netx4000_s_ca9_intram_rap0_l1c_ecc_trigger,
	})
imgpars.target_name = 'test_ecc/ramtest_standalone_nxhx4000_ddr3_600MHz_ECC_trigger_ca9_core0_cached.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CA9core0_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)

imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCA9core0'        : elf_netx4000_s_ca9_intram_rap0_l2c_ecc_trigger,
	})
imgpars.target_name = 'test_ecc/ramtest_standalone_nxhx4000_ddr3_600MHz_ECC_trigger_ca9_core0_cached_l2.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CA9core0_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)

#############################################################################################################
# SDRAM tests
#
#############################################################################################################

imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCR7'             : elf_netx4000_s_cr7,
	'tElfCA9core0'        : elf_netx4000_s_ca9_core0,
	'tElfCA9core1'        : elf_netx4000_s_ca9_core1
	})

aSDRAMTests = (
('nxhx4000_hif_sdram_sdrspi16mb_cr7_ca9', 'nxhx4000/CR7_CA9_to_INTRAM_nxhx4000_sdrspi16mb_hif_sdram.xml'),
('nxhx4000_hif_sdram_sdrspi16mb_cr7',     'nxhx4000/CR7_to_INTRAM_nxhx4000_sdrspi16mb_hif_sdram.xml'),
('nxhx4000_hif_sdram_sdrspi16mb_ca9',     'nxhx4000/CA9_to_INTRAM_nxhx4000_sdrspi16mb_hif_sdram.xml'),

('cifx4000_hif_sdram_cr7_ca9',            'cifx4000/CR7_CA9_cifX4000_1430100R1_sdram.xml'),
('cifx4000_hif_sdram_cr7',                'cifx4000/CR7_cifX4000_1430100R1_sdram.xml'),
('cifx4000_hif_sdram_ca9',                'cifx4000/CA9_cifX4000_1430100R1_sdram.xml'),

('nxhx4000_switch_mem_sdram_cr7_ca9',     'nxhx4000/CR7_CA9_to_INTRAM_nxhx4000_switch_mem_sdram.xml'),
('nxhx4000_switch_mem_sdram_cr7',         'nxhx4000/CR7_to_INTRAM_nxhx4000_switch_mem_sdram.xml'),
('nxhx4000_switch_mem_sdram_ca9',         'nxhx4000/CA9_to_INTRAM_nxhx4000_switch_mem_sdram.xml'),
)

for tEntry in aSDRAMTests:
	imgpars.target_name ='test_sdram/ramtest_standalone_%s.bin' % tEntry[0]
	imgpars.xml_template = 'src/netx4000/%s' % tEntry[1]
	print imgpars.xml_template, " ==> ", imgpars.target_name
	make_bootimage(imgpars)

	
#############################################################################################################
# Cache tests
# CR7 uncached 
# CR7 with cache
# CA9 core 0 uncached
# CA9 core 0 uncached, with MMU config
# CA9 core 0 with L1 cache
# CA9 core 0 with L2 cache
#############################################################################################################



imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7'             : elf_netx4000_s_cr7,
	})
	
imgpars.target_name = 'test_cache/ramtest_standalone_nxhx4000_ddr3_600MHz_cr7.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CR7_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)

imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCA9core0'        : elf_netx4000_s_ca9_core0,
	'tElfCA9core1'        : elf_netx4000_s_ca9_core1
	})
	
imgpars.target_name = 'test_cache/ramtest_standalone_nxhx4000_ddr3_600MHz_ca9_core0.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CA9core0_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)

imgpars.target_name = 'test_cache/ramtest_standalone_nxhx4000_ddr3_600MHz_ca9.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CA9_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)

imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7'             : elf_netx4000_s_cr7_cached,
	})

imgpars.target_name = 'test_cache/ramtest_standalone_nxhx4000_ddr3_600MHz_cr7_cached.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CR7_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)

imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCA9core0'        : elf_netx4000_s_ca9_core0_cached,
	'tElfCA9core1'        : elf_netx4000_s_ca9_core1_cached
	})
	
imgpars.target_name = 'test_cache/ramtest_standalone_nxhx4000_ddr3_600MHz_ca9_core0_cached.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CA9core0_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)

imgpars.target_name = 'test_cache/ramtest_standalone_nxhx4000_ddr3_600MHz_ca9_cached.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CA9_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)


imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCA9core0'        : elf_netx4000_s_ca9_core0_cached_l2,
	'tElfCA9core1'        : elf_netx4000_s_ca9_core1_cached
	})

imgpars.target_name = 'test_cache/ramtest_standalone_nxhx4000_ddr3_600MHz_ca9_core0_cached_l2.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CA9core0_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)

imgpars.target_name = 'test_cache/ramtest_standalone_nxhx4000_ddr3_600MHz_ca9_cached_l2.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CA9_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)


# Enable the MMU, but not the caches.
# Branch prediction is already enabled by the ROM code.

sources_standalone_netx4000_ca9_single_core = """
	src/netx4000/CA9/ca9_init_single_core.S
	src/netx4000/CA9/v7a.S
	src/netx4000/CA9/mmu_s.S
	src/netx4000/CA9/MP_SCU.s
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
	src/ramtest_ecc.c
	src/ecc_ddr.c
	src/ecc_a9.c
"""

# Note: defines differ from the other init code variants!
buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_single_core
buildpars.defines     = [['CPU_CA9'], ['CA9_ENABLE_MMU']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap0.ld'
buildpars.target_dir  = 'targets/netx4000_ca9_intram_rap0_single_core_mmu_nocache'
buildpars.target_name = 'netx4000_ramtest_ca9_intram_rap0_single_core_mmu_nocache'
elf_netx4000_s_intram_rap0_ca9_single_core_mmu_nocache = build_elf_bin(buildpars)

imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
	'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls,
	'tElfCA9core0'        : elf_netx4000_s_intram_rap0_ca9_single_core_mmu_nocache,
	})
	
imgpars.target_name = 'test_cache/ramtest_standalone_nxhx4000_ddr3_600MHz_ca9_core0_mmu_nocache.bin'
imgpars.xml_template = 'src/netx4000/nxhx4000/CA9core0_to_INTRAM_nxhx4000_ddr3_600MHz.xml'
make_bootimage(imgpars)


#############################################################################################################
# netx 500, 50, 10, 51, 52
env_netx500_s = atEnv.NETX500.Clone()
env_netx500_s.Replace(LDFILE = 'src/netx500/netx500.ld')
env_netx500_s.Append(CPPPATH = aCppPath)
src_netx500_s = env_netx500_s.SetBuildPath('targets/netx500/standalone', 'src', sources_common+sources_arm_assembler+sources_standalone)
elf_netx500_s = env_netx500_s.Elf('targets/netx500/standalone/ramtest_netx500.elf', src_netx500_s + env_netx500_s['PLATFORM_LIBRARY'])
ramtest_standalone_netx500 = env_netx500_s.BootBlock('targets/netx500/standalone/ramtest_standalone_netx500.bin', elf_netx500_s, BOOTBLOCK_SRC={}, BOOTBLOCK_DST={})


env_netx56_s = atEnv.NETX56.Clone()
env_netx56_s.Replace(LDFILE = 'src/netx56/netx56.ld')
env_netx56_s.Append(CPPPATH = aCppPath)
src_netx56_s = env_netx56_s.SetBuildPath('targets/netx56/standalone', 'src', sources_common+sources_arm_assembler+sources_standalone)
elf_netx56_s = env_netx56_s.Elf('targets/netx56/standalone/ramtest_netx56.elf', src_netx56_s + env_netx56_s['PLATFORM_LIBRARY'])
ramtest_standalone_netx56 = env_netx56_s.BootBlock('targets/netx56/standalone/ramtest_standalone_netx56.bin', elf_netx56_s, BOOTBLOCK_SRC={}, BOOTBLOCK_DST={})


env_netx50_s = atEnv.NETX50.Clone()
env_netx50_s.Replace(LDFILE = 'src/netx50/netx50.ld')
env_netx50_s.Append(CPPPATH = aCppPath)
src_netx50_s = env_netx50_s.SetBuildPath('targets/netx50/standalone', 'src', sources_common+sources_arm_assembler+sources_standalone)
elf_netx50_s = env_netx50_s.Elf('targets/netx50/standalone/ramtest_netx50.elf', src_netx50_s + env_netx50_s['PLATFORM_LIBRARY'])
ramtest_standalone_netx50 = env_netx50_s.BootBlock('targets/netx50/standalone/ramtest_standalone_netx50.bin', elf_netx50_s, BOOTBLOCK_SRC={}, BOOTBLOCK_DST={})


env_netx10_s = atEnv.NETX10.Clone()
env_netx10_s.Replace(LDFILE = 'src/netx10/netx10.ld')
env_netx10_s.Append(CPPPATH = aCppPath)
src_netx10_s = env_netx10_s.SetBuildPath('targets/netx10/standalone', 'src', sources_common+sources_arm_assembler+sources_standalone)
elf_netx10_s = env_netx10_s.Elf('targets/netx10/standalone/ramtest_netx10.elf', src_netx10_s + env_netx10_s['PLATFORM_LIBRARY'])
ramtest_standalone_netx10 = env_netx10_s.BootBlock('targets/netx10/standalone/ramtest_standalone_netx10.bin', elf_netx10_s, BOOTBLOCK_SRC={}, BOOTBLOCK_DST={})


Export('ramtest_standalone_netx500', 'ramtest_standalone_netx56', 'ramtest_standalone_netx50', 'ramtest_standalone_netx10')
#Export('ramtest_standalone_cifx4000_sdram')
#Export('ramtest_standalone_nxhx4000_ddr3_400MHz_cr7')

#----------------------------------------------------------------------------
#
# Build the debugger version.
#
env_netx500_d = atEnv.NETX500.Clone()
env_netx500_d.Replace(LDFILE = 'src/netx500/netx500.ld')
env_netx500_d.Append(CPPPATH = aCppPath)
src_netx500_d = env_netx500_d.SetBuildPath('targets/netx500/debugger', 'src', sources_common+sources_arm_assembler+sources_debugger)
elf_netx500_d = env_netx500_d.Elf('targets/netx500/debugger/ramtest_netx500.elf', src_netx500_d + env_netx500_d['PLATFORM_LIBRARY'])

