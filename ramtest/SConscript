# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2012 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Import all required objects and modules.
#
import os.path
Import('atEnv')


#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
sources_common = """
	src/header.c
	src/progress.c
	src/ramtest.c
	src/setup_sdram.c
"""

sources_arm_assembler = """
	src/performance_test.S
	src/ramtest_perf.c
	src/random_burst.s
"""

sources_test = """
	src/init_netx_test.S
	src/main_test.c
"""

sources_standalone = """
	src/init_standalone.S
	src/main_standalone.c
"""

sources_standalone_netx4000_cr7 = """
	src/netx4000/init_standalone_cr7.S
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
	src/ramtest_ecc.c
	src/ecc_ddr.c
"""

sources_standalone_netx4000_ca9 = """
	src/netx4000/init_standalone_ca9.S
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
	src/ramtest_ecc.c
	src/ecc_ddr.c
	src/ecc_a9.c
"""

sources_standalone_netx4000_cr7_cached = """
	src/netx4000/init_standalone_cr7_cache_enable.S
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
	src/ramtest_ecc.c
	src/ecc_ddr.c
"""

sources_standalone_netx4000_ca9_cached = """
	src/netx4000/CA9/ca9_init.S
	src/netx4000/CA9/v7a.S
	src/netx4000/CA9/mmu_s.S
	src/netx4000/CA9/MP_SCU.s
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
	src/ramtest_ecc.c
	src/ecc_ddr.c
	src/ecc_a9.c
"""

sources_standalone_netx4000_ca9_core0_1_cached = """
	src/netx4000/CA9/ca9_0_1_init.S
	src/netx4000/CA9/v7a.S
	src/netx4000/CA9/mmu_s.S
	src/netx4000/CA9/MP_SCU.s
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
	src/ramtest_ecc.c
	src/ecc_ddr.c
	src/ecc_a9.c
	src/ramtest_smp.c
	src/uart_wrapper.c
"""


sources_debugger = """
	src/init_debugger.S
	src/main_standalone.c
"""

sources_sim = """
	src/init_simu.S
	src/main_simu.c
	src/performance_test.S
	src/ramtest_perf.c
	src/setup_sdram.c
"""

# special files for netX 4000 bootup
sources_cr7_openfirewalls = """
	src/netx4000/cr7_open_netx4000_firewalls.S
"""

sources_cr7_init_cache = """
	src/netx4000/cr7_init_cache.s
"""

sources_ca9_init_cache = """
	src/netx4000/ca9_init_cache.S
"""

sources_cr7_sync_ca9 = """
	src/netx4000/cr7_sync_ca9.S
"""


# Defines Overview:
# ['CPU_CR7', '1']          main_standalone_netx4000: systime_init(); 
# ['CPU_CA9']               not checked
# ['CA9_NO_L2C_ENABLE']     do not enable L2C
# ['ECC'],                  check ECC flags during ramtest
# ['DDR_ECC']               enable DDR ECC checking
# ['CA9_L1C_ECC']           enable CA9 L1 ECC and CA9 L1 ECC checking
# ['ECC_TRIGGER']           trigger ECC error
# ['SMP']                   enable cache coherency tests
# ['WRAP_UART']             for SMP: use UART depending on CPU ID


sources_standalone_netx4000_ca9_single_core = """
	src/netx4000/CA9/ca9_init_single_core.S
	src/netx4000/CA9/v7a.S
	src/netx4000/CA9/mmu_s.S
	src/netx4000/CA9/MP_SCU.s
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
	src/ramtest_ecc.c
	src/ecc_ddr.c
	src/ecc_a9.c
"""

# Note: defines for sources_standalone_netx4000_ca9_single_core differ from the other init code variants!
# sources_standalone_netx4000_ca9_single_core
#
# ['CA9_ENABLE_MMU']        Enable MMU, but not the cache. Branch prediction is already enabled by the ROM code.
# ['CA9_ENABLE_L1_CACHE']   Enable L1 cache
# ['CA9_ENABLE_L2_CACHE']   Enable L2 cache

aCppPath = ['src', '#platform/src', '#platform/src/lib', '#targets/version']

#----------------------------------------------------------------------------
#
# Build the standalone version. 
#
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# auxiliary routines
#----------------------------------------------------------------------------

# open firewalls on cr7
env_netx4000_cr7_openfirewalls = atEnv.NETX4000.Clone()
env_netx4000_cr7_openfirewalls.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_cr7_openfirewalls.Append(CPPPATH = aCppPath)
src_netx4000_cr7_openfirewalls = env_netx4000_cr7_openfirewalls.SetBuildPath('targets/netx4000_openfirewalls', 'src', sources_cr7_openfirewalls)
elf_netx4000_cr7_openfirewalls = env_netx4000_cr7_openfirewalls.Elf('targets/netx4000_openfirewalls/netx4000_cr7_openfirewalls.elf', src_netx4000_cr7_openfirewalls)
txt_netx4000_cr7_openfirewalls = env_netx4000_cr7_openfirewalls.ObjDump('targets/netx4000_openfirewalls/netx4000_cr7_openfirewalls.txt', elf_netx4000_cr7_openfirewalls, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])

# enable caches and branch prediction on CR7
env_netx4000_cr7_init_cache = atEnv.NETX4000.Clone()
env_netx4000_cr7_init_cache.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_cr7_init_cache.Append(CPPPATH = aCppPath)
src_netx4000_cr7_init_cache = env_netx4000_cr7_init_cache.SetBuildPath('targets/netx4000_cr7_init_cache', 'src', sources_cr7_init_cache)
elf_netx4000_cr7_init_cache = env_netx4000_cr7_init_cache.Elf(         'targets/netx4000_cr7_init_cache/netx4000_cr7_init_cache.elf', src_netx4000_cr7_init_cache)
txt_netx4000_cr7_init_cache = env_netx4000_cr7_init_cache.ObjDump(     'targets/netx4000_cr7_init_cache/netx4000_cr7_init_cache.txt', elf_netx4000_cr7_init_cache, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_cr7_init_cache = env_netx4000_cr7_init_cache.ObjCopy(     'targets/netx4000_cr7_init_cache/netx4000_cr7_init_cache.bin', elf_netx4000_cr7_init_cache)

# enable caches and branch prediction on CA9
# When done, overwrites CA9 firmware vector with 0x11UL 0x22UL. 
env_netx4000_ca9_init_cache = atEnv.NETX4000.Clone()
env_netx4000_ca9_init_cache.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap0.ld')
env_netx4000_ca9_init_cache.Append(CPPPATH = aCppPath)
src_netx4000_ca9_init_cache = env_netx4000_ca9_init_cache.SetBuildPath('targets/netx4000_ca9_init_cache', 'src', sources_ca9_init_cache)
elf_netx4000_ca9_init_cache = env_netx4000_ca9_init_cache.Elf(         'targets/netx4000_ca9_init_cache/netx4000_ca9_init_cache.elf', src_netx4000_ca9_init_cache)
txt_netx4000_ca9_init_cache = env_netx4000_ca9_init_cache.ObjDump(     'targets/netx4000_ca9_init_cache/netx4000_ca9_init_cache.txt', elf_netx4000_ca9_init_cache, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_ca9_init_cache = env_netx4000_ca9_init_cache.ObjCopy(     'targets/netx4000_ca9_init_cache/netx4000_ca9_init_cache.bin', elf_netx4000_ca9_init_cache)

# Wait on CR7 for cache enable on CA9 to complete.
env_netx4000_cr7_sync_ca9 = atEnv.NETX4000.Clone()
env_netx4000_cr7_sync_ca9.Replace(LDFILE = 'src/netx4000/netx4000_cr7_synca9.ld')
env_netx4000_cr7_sync_ca9.Append(CPPPATH = aCppPath)
src_netx4000_cr7_sync_ca9 = env_netx4000_cr7_sync_ca9.SetBuildPath('targets/netx4000_cr7_sync_ca9', 'src', sources_cr7_sync_ca9)
elf_netx4000_cr7_sync_ca9 = env_netx4000_cr7_sync_ca9.Elf(         'targets/netx4000_cr7_sync_ca9/netx4000_cr7_sync_ca9.elf', src_netx4000_cr7_sync_ca9)
txt_netx4000_cr7_sync_ca9 = env_netx4000_cr7_sync_ca9.ObjDump(     'targets/netx4000_cr7_sync_ca9/netx4000_cr7_sync_ca9.txt', elf_netx4000_cr7_sync_ca9, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_cr7_sync_ca9 = env_netx4000_cr7_sync_ca9.ObjCopy(     'targets/netx4000_cr7_sync_ca9/netx4000_cr7_sync_ca9.bin', elf_netx4000_cr7_sync_ca9)




#----------------------------------------------------------------------------
#  standalone ramtest
#  CR7: LLRAM
#  CA9: intram_rap0/1
#  no cache
#----------------------------------------------------------------------------

# ramtest for the CR7.
env_netx4000_s_cr7 = atEnv.NETX4000.Clone()
env_netx4000_s_cr7.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_s_cr7.Append(CPPPATH = aCppPath)
env_netx4000_s_cr7.Append(CPPDEFINES = [['CPU_CR7', '1']])
src_netx4000_s_cr7 = env_netx4000_s_cr7.SetBuildPath('targets/netx4000_cr7', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7)
elf_netx4000_s_cr7 = env_netx4000_s_cr7.Elf(         'targets/netx4000_cr7/netx4000_ramtest_cr7.elf', src_netx4000_s_cr7 + env_netx4000_s_cr7['PLATFORM_LIBRARY'])
txt_netx4000_s_cr7 = env_netx4000_s_cr7.ObjDump(     'targets/netx4000_cr7/netx4000_ramtest_cr7.txt', elf_netx4000_s_cr7, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_cr7 = env_netx4000_s_cr7.ObjCopy(     'targets/netx4000_cr7/netx4000_ramtest_cr7.bin', elf_netx4000_s_cr7)

# ramtest for CA9 core 0.
env_netx4000_s_ca9_core0 = atEnv.NETX4000.Clone()
env_netx4000_s_ca9_core0.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap0.ld')
env_netx4000_s_ca9_core0.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_core0.Append(CPPPATH = ['src/netx4000'])
env_netx4000_s_ca9_core0.Append(CPPDEFINES = [['CPU_CA9']])
src_netx4000_s_ca9_core0 = env_netx4000_s_ca9_core0.SetBuildPath('targets/netx4000_ca9_core0', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9)
elf_netx4000_s_ca9_core0 = env_netx4000_s_ca9_core0.Elf(         'targets/netx4000_ca9_core0/netx4000_ramtest_ca9_core0.elf', src_netx4000_s_ca9_core0 + env_netx4000_s_ca9_core0['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_core0 = env_netx4000_s_ca9_core0.ObjDump(     'targets/netx4000_ca9_core0/netx4000_ramtest_ca9_core0.txt', elf_netx4000_s_ca9_core0, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_core0 = env_netx4000_s_ca9_core0.ObjCopy(     'targets/netx4000_ca9_core0/netx4000_ramtest_ca9_core0.bin', elf_netx4000_s_ca9_core0)

# ramtest for CA9 core 1.
env_netx4000_s_ca9_core1 = atEnv.NETX4000.Clone()
env_netx4000_s_ca9_core1.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap1.ld')
env_netx4000_s_ca9_core1.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_core1.Append(CPPPATH = ['src/netx4000'])
env_netx4000_s_ca9_core1.Append(CPPDEFINES = [['CPU_CA9', '1']])
src_netx4000_s_ca9_core1 = env_netx4000_s_ca9_core1.SetBuildPath('targets/netx4000_ca9_core1', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9)
elf_netx4000_s_ca9_core1 = env_netx4000_s_ca9_core1.Elf(         'targets/netx4000_ca9_core1/netx4000_ramtest_ca9_core1.elf', src_netx4000_s_ca9_core1 + env_netx4000_s_ca9_core1['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_core1 = env_netx4000_s_ca9_core1.ObjDump(     'targets/netx4000_ca9_core1/netx4000_ramtest_ca9_core1.txt', elf_netx4000_s_ca9_core1, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_core1 = env_netx4000_s_ca9_core1.ObjCopy(     'targets/netx4000_ca9_core1/netx4000_ramtest_ca9_core1.bin', elf_netx4000_s_ca9_core1)


#----------------------------------------------------------------------------
# standalone ramtest 
#  CR7  LLRAM           L1C
#  CA9  RAP intram 0    L1C
#  CA9  RAP intram 1    L1C
#  CA9  RAP intram 0    L2C
#----------------------------------------------------------------------------


# ramtest for the CR7, L1 cache is enabled in init.s
env_netx4000_s_cr7_cached = atEnv.NETX4000.Clone()
env_netx4000_s_cr7_cached.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_s_cr7_cached.Append(CPPPATH = aCppPath)
env_netx4000_s_cr7_cached.Append(CPPDEFINES = [['CPU_CR7', '1']])
src_netx4000_s_cr7_cached = env_netx4000_s_cr7_cached.SetBuildPath('targets/netx4000_cr7_cached', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7_cached)
elf_netx4000_s_cr7_cached = env_netx4000_s_cr7_cached.Elf(         'targets/netx4000_cr7_cached/netx4000_ramtest_cr7_cached.elf', src_netx4000_s_cr7_cached + env_netx4000_s_cr7_cached['PLATFORM_LIBRARY'])
txt_netx4000_s_cr7_cached = env_netx4000_s_cr7_cached.ObjDump(     'targets/netx4000_cr7_cached/netx4000_ramtest_cr7_cached.txt', elf_netx4000_s_cr7_cached, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_cr7_cached = env_netx4000_s_cr7_cached.ObjCopy(     'targets/netx4000_cr7_cached/netx4000_ramtest_cr7_cached.bin', elf_netx4000_s_cr7_cached)

# ramtest for CA9 core 0, l1 cache is enabled in ca9_init.S
env_netx4000_s_ca9_core0_cached = atEnv.NETX4000.Clone()
env_netx4000_s_ca9_core0_cached.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap0.ld')
env_netx4000_s_ca9_core0_cached.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_core0_cached.Append(CPPPATH = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000'])
env_netx4000_s_ca9_core0_cached.Append(CPPDEFINES = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE']])
src_netx4000_s_ca9_core0_cached = env_netx4000_s_ca9_core0_cached.SetBuildPath('targets/netx4000_ca9_core0_cached', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached)
elf_netx4000_s_ca9_core0_cached = env_netx4000_s_ca9_core0_cached.Elf(         'targets/netx4000_ca9_core0_cached/netx4000_ramtest_ca9_core0_cached.elf', src_netx4000_s_ca9_core0_cached + env_netx4000_s_ca9_core0_cached['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_core0_cached = env_netx4000_s_ca9_core0_cached.ObjDump(     'targets/netx4000_ca9_core0_cached/netx4000_ramtest_ca9_core0_cached.txt', elf_netx4000_s_ca9_core0_cached, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_core0_cached = env_netx4000_s_ca9_core0_cached.ObjCopy(     'targets/netx4000_ca9_core0_cached/netx4000_ramtest_ca9_core0_cached.bin', elf_netx4000_s_ca9_core0_cached)

# ramtest for CA9 core 1, l1 cache is enabled in ca9_init.s
env_netx4000_s_ca9_core1_cached = atEnv.NETX4000.Clone()
env_netx4000_s_ca9_core1_cached.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap1.ld')
env_netx4000_s_ca9_core1_cached.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_core1_cached.Append(CPPPATH = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000'])
env_netx4000_s_ca9_core1_cached.Append(CPPDEFINES = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE']])
src_netx4000_s_ca9_core1_cached = env_netx4000_s_ca9_core1_cached.SetBuildPath('targets/netx4000_ca9_core1_cached', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached)
elf_netx4000_s_ca9_core1_cached = env_netx4000_s_ca9_core1_cached.Elf(         'targets/netx4000_ca9_core1_cached/netx4000_ramtest_ca9_core1_cached.elf', src_netx4000_s_ca9_core1_cached + env_netx4000_s_ca9_core1_cached['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_core1_cached = env_netx4000_s_ca9_core1_cached.ObjDump(     'targets/netx4000_ca9_core1_cached/netx4000_ramtest_ca9_core1_cached.txt', elf_netx4000_s_ca9_core1_cached, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_core1_cached = env_netx4000_s_ca9_core1_cached.ObjCopy(     'targets/netx4000_ca9_core1_cached/netx4000_ramtest_ca9_core1_cached.bin', elf_netx4000_s_ca9_core1_cached)

# ramtest for CA9 core 0, L1+L2 caches are enabled in ca9_init.s
env_netx4000_s_ca9_core0_cached_l2 = atEnv.NETX4000.Clone()
env_netx4000_s_ca9_core0_cached_l2.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap0.ld')
env_netx4000_s_ca9_core0_cached_l2.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_core0_cached_l2.Append(CPPPATH = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000'])
env_netx4000_s_ca9_core0_cached_l2.Append(CPPDEFINES = [['CPU_CA9']])
src_netx4000_s_ca9_core0_cached_l2 = env_netx4000_s_ca9_core0_cached_l2.SetBuildPath('targets/netx4000_ca9_core0_cached_l2', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached)
elf_netx4000_s_ca9_core0_cached_l2 = env_netx4000_s_ca9_core0_cached_l2.Elf(         'targets/netx4000_ca9_core0_cached_l2/netx4000_ramtest_ca9_core0_cached_l2.elf', src_netx4000_s_ca9_core0_cached_l2 + env_netx4000_s_ca9_core0_cached_l2['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_core0_cached_l2 = env_netx4000_s_ca9_core0_cached_l2.ObjDump(     'targets/netx4000_ca9_core0_cached_l2/netx4000_ramtest_ca9_core0_cached_l2.txt', elf_netx4000_s_ca9_core0_cached_l2, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_core0_cached_l2 = env_netx4000_s_ca9_core0_cached.ObjCopy(     'targets/netx4000_ca9_core0_cached_l2/netx4000_ramtest_ca9_core0_cached_l2.bin', elf_netx4000_s_ca9_core0_cached_l2)



#----------------------------------------------------------------------------
# Standalone RAM test
#  CR7 netx intram 0 L1C
#  CA9 rap intram 2  L2C
#  CA9 rap intram 2  L1C
#  CA9 rap intram 3  L1C
#----------------------------------------------------------------------------

# ramtest for the CR7 in netx intram 0 (05080000-0509ffff), cache is enabled in init.s
env_netx4000_s_cr7_netx_intram_cached = atEnv.NETX4000.Clone()
env_netx4000_s_cr7_netx_intram_cached.Replace(LDFILE = 'src/netx4000/netx4000_cr7_netx_intram0.ld')
env_netx4000_s_cr7_netx_intram_cached.Append(CPPPATH = aCppPath)
env_netx4000_s_cr7_netx_intram_cached.Append(CPPDEFINES = [['CPU_CR7', '1']])
src_netx4000_s_cr7_netx_intram_cached = env_netx4000_s_cr7_netx_intram_cached.SetBuildPath('targets/netx4000_cr7_netx_intram_cached', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7_cached)
elf_netx4000_s_cr7_netx_intram_cached = env_netx4000_s_cr7_netx_intram_cached.Elf(         'targets/netx4000_cr7_netx_intram_cached/netx4000_ramtest_cr7_netx_intram_cached.elf', src_netx4000_s_cr7_netx_intram_cached + env_netx4000_s_cr7_netx_intram_cached['PLATFORM_LIBRARY'])
txt_netx4000_s_cr7_netx_intram_cached = env_netx4000_s_cr7_netx_intram_cached.ObjDump(     'targets/netx4000_cr7_netx_intram_cached/netx4000_ramtest_cr7_netx_intram_cached.txt', elf_netx4000_s_cr7_netx_intram_cached, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_cr7_netx_intram_cached = env_netx4000_s_cr7_netx_intram_cached.ObjCopy(     'targets/netx4000_cr7_netx_intram_cached/netx4000_ramtest_cr7_netx_intram_cached.bin', elf_netx4000_s_cr7_netx_intram_cached)

# ramtest for CA9 in intram_rap2, L1+L2 caches are enabled in ca9_init.s
env_netx4000_s_ca9_intram_rap2_cached_l2 = atEnv.NETX4000.Clone()
env_netx4000_s_ca9_intram_rap2_cached_l2.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap2.ld')
env_netx4000_s_ca9_intram_rap2_cached_l2.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_intram_rap2_cached_l2.Append(CPPPATH = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000'])
env_netx4000_s_ca9_intram_rap2_cached_l2.Append(CPPDEFINES = [['CPU_CA9']])
src_netx4000_s_ca9_intram_rap2_cached_l2 = env_netx4000_s_ca9_intram_rap2_cached_l2.SetBuildPath('targets/netx4000_ca9_intram_rap2_cached_l2', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached)
elf_netx4000_s_ca9_intram_rap2_cached_l2 = env_netx4000_s_ca9_intram_rap2_cached_l2.Elf(         'targets/netx4000_ca9_intram_rap2_cached_l2/netx4000_ramtest_ca9_intram_rap2_cached_l2.elf', src_netx4000_s_ca9_intram_rap2_cached_l2 + env_netx4000_s_ca9_intram_rap2_cached_l2['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_intram_rap2_cached_l2 = env_netx4000_s_ca9_intram_rap2_cached_l2.ObjDump(     'targets/netx4000_ca9_intram_rap2_cached_l2/netx4000_ramtest_ca9_intram_rap2_cached_l2.txt', elf_netx4000_s_ca9_intram_rap2_cached_l2, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_intram_rap2_cached_l2 = env_netx4000_s_ca9_intram_rap2_cached_l2.ObjCopy(     'targets/netx4000_ca9_intram_rap2_cached_l2/netx4000_ramtest_ca9_intram_rap2_cached_l2.bin', elf_netx4000_s_ca9_intram_rap2_cached_l2)


# ramtest for CA9 in intram_rap2, L1 cache is enabled in ca9_init.s
env_netx4000_s_ca9_intram_rap2_cached = atEnv.NETX4000.Clone()
env_netx4000_s_ca9_intram_rap2_cached.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap2.ld')
env_netx4000_s_ca9_intram_rap2_cached.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_intram_rap2_cached.Append(CPPPATH = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000'])
env_netx4000_s_ca9_intram_rap2_cached.Append(CPPDEFINES = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE']])
src_netx4000_s_ca9_intram_rap2_cached = env_netx4000_s_ca9_intram_rap2_cached.SetBuildPath('targets/netx4000_ca9_intram_rap2_cached', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached)
elf_netx4000_s_ca9_intram_rap2_cached = env_netx4000_s_ca9_intram_rap2_cached.Elf(         'targets/netx4000_ca9_intram_rap2_cached/netx4000_ramtest_ca9_intram_rap2_cached.elf', src_netx4000_s_ca9_intram_rap2_cached + env_netx4000_s_ca9_intram_rap2_cached['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_intram_rap2_cached = env_netx4000_s_ca9_intram_rap2_cached.ObjDump(     'targets/netx4000_ca9_intram_rap2_cached/netx4000_ramtest_ca9_intram_rap2_cached.txt', elf_netx4000_s_ca9_intram_rap2_cached, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_intram_rap2_cached = env_netx4000_s_ca9_intram_rap2_cached.ObjCopy(     'targets/netx4000_ca9_intram_rap2_cached/netx4000_ramtest_ca9_intram_rap2_cached.bin', elf_netx4000_s_ca9_intram_rap2_cached)


# ramtest for CA9 in intram_rap3, l1 cache is enabled in ca9_init.s
env_netx4000_s_ca9_intram_rap3_cached = atEnv.NETX4000.Clone()
env_netx4000_s_ca9_intram_rap3_cached.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram_rap3.ld')
env_netx4000_s_ca9_intram_rap3_cached.Append(CPPPATH = aCppPath)
env_netx4000_s_ca9_intram_rap3_cached.Append(CPPPATH = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000'])
env_netx4000_s_ca9_intram_rap3_cached.Append(CPPDEFINES = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE']])
src_netx4000_s_ca9_intram_rap3_cached = env_netx4000_s_ca9_intram_rap3_cached.SetBuildPath('targets/netx4000_ca9_intram_rap3_cached', 'src', sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached)
elf_netx4000_s_ca9_intram_rap3_cached = env_netx4000_s_ca9_intram_rap3_cached.Elf(         'targets/netx4000_ca9_intram_rap3_cached/netx4000_ramtest_ca9_intram_rap3_cached.elf', src_netx4000_s_ca9_intram_rap3_cached + env_netx4000_s_ca9_intram_rap3_cached['PLATFORM_LIBRARY'])
txt_netx4000_s_ca9_intram_rap3_cached = env_netx4000_s_ca9_intram_rap3_cached.ObjDump(     'targets/netx4000_ca9_intram_rap3_cached/netx4000_ramtest_ca9_intram_rap3_cached.txt', elf_netx4000_s_ca9_intram_rap3_cached, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
bin_netx4000_s_ca9_intram_rap3_cached = env_netx4000_s_ca9_intram_rap3_cached.ObjCopy(     'targets/netx4000_ca9_intram_rap3_cached/netx4000_ramtest_ca9_intram_rap3_cached.bin', elf_netx4000_s_ca9_intram_rap3_cached)


def build_elf_bin(pars):
	target_path = pars.target_dir + '/' + pars.target_name
	env = pars.env.Clone()
	env.Replace(LDFILE = pars.ldfile)
	env.Append(CPPPATH = aCppPath)
	env.Append(CPPPATH = pars.cpppath)
	env.Append(CPPDEFINES = pars.defines)
	src = env.SetBuildPath(pars.target_dir, 'src', pars.sources)
	elf = env.Elf(    target_path + '.elf', src + env['PLATFORM_LIBRARY'])
	txt = env.ObjDump(target_path + '.txt', elf, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
	bin = env.ObjCopy(target_path + '.bin', elf)
	return elf, bin

class buildpars:
	env         = atEnv.NETX4000
	cpppath     = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000']


#############################################################################################################
# DDR/A9 L1C ECC Trigger Test
#############################################################################################################

#----------------------------------------------------------------------------
# Standalone RAM test with DDR ECC trigger
#  CR7  LLRAM            uncached 
#  CR7  LLRAM              L1C    
#  CA9 core 0 RAP_Intram0  L1C 
#  CA9 core 1 RAP_Intram0  L2C
#----------------------------------------------------------------------------

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7
buildpars.defines     = [['CPU_CR7', '1'],                    ['ECC'], ['DDR_ECC'], ['ECC_TRIGGER']]
buildpars.ldfile      = 'src/netx4000/netx4000_cr7_llram.ld'
buildpars.target_dir  = 'targets/netx4000_cr7_ecc_trigger'
buildpars.target_name = 'netx4000_ramtest_cr7_ecc_trigger'
elf_netx4000_s_llram_cr7_ecc_trigger = build_elf_bin(buildpars)

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7_cached
buildpars.defines     = [['CPU_CR7', '1'],                    ['ECC'], ['DDR_ECC'], ['ECC_TRIGGER']]
buildpars.ldfile      = 'src/netx4000/netx4000_cr7_llram.ld'
buildpars.target_dir  = 'targets/netx4000_cr7_l1c_ecc_trigger'
buildpars.target_name = 'netx4000_ramtest_cr7_l1c_ecc_trigger'
elf_netx4000_s_llram_cr7_l1c_ecc_trigger = build_elf_bin(buildpars)


	
# RAMTEST DDR/A9 L1C ECC 
#----------------------------------------------------------------------------

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_cr7_cached
buildpars.defines     = [['CPU_CR7', '1'],                   ['ECC'], ['DDR_ECC']]
buildpars.ldfile      = 'src/netx4000/netx4000_cr7_llram.ld'
buildpars.target_dir  = 'targets/netx4000_cr7_llram_l1c_ecc'
buildpars.target_name = 'netx4000_ramtest_cr7_llram_l1c_ecc'
elf_netx4000_s_cr7_llram_l1c_ecc = build_elf_bin(buildpars)

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached
buildpars.defines     = [['CPU_CA9'],                        ['ECC'], ['CA9_L1C_ECC'], ['DDR_ECC']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap0.ld'
buildpars.target_dir  = 'targets/netx4000_ca9_intram_rap0_l2c_ecc'
buildpars.target_name = 'netx4000_ramtest_ca9_intram_rap0_l2c_ecc'
elf_netx4000_s_ca9_intram_rap0_l2c_ecc = build_elf_bin(buildpars)

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_cached
buildpars.defines     = [['CPU_CA9'], ['CA9_NO_L2C_ENABLE'], ['ECC'], ['CA9_L1C_ECC'], ['DDR_ECC']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap1.ld'
buildpars.target_dir  = 'targets/netx4000_ca9_intram_rap1_l1c_ecc'
buildpars.target_name = 'netx4000_ramtest_ca9_intram_rap1_l1c_ecc'
elf_netx4000_s_ca9_intram_rap1_l1c_ecc = build_elf_bin(buildpars)

buildpars.sources     = sources_common+sources_arm_assembler+sources_standalone_netx4000_ca9_core0_1_cached
buildpars.defines     = [['CPU_CA9'], ['SMP'], ['WRAP_UART'], ['ECC'], ['CA9_L1C_ECC'], ['DDR_ECC']]
buildpars.ldfile      = 'src/netx4000/netx4000_ca9_intram_rap0_1.ld'
buildpars.target_dir  = 'targets/netx4000_ca9_intram_rap0_1_smp_l2c_ecc'
buildpars.target_name = 'netx4000_ramtest_ca9_intram_rap0_1_smp_l2c_ecc'
elf_netx4000_s_ca9_rap_intram0_1_smp_l2c_ecc = build_elf_bin(buildpars)




#############################################################################################################
#############################################################################################################


def build_elf_bin(pars):
	target_path = pars.target_dir + '/' + pars.target_name
	env = pars.env.Clone()
	env.Replace(LDFILE = pars.ldfile)
	env.Append(CPPPATH = aCppPath)
	env.Append(CPPPATH = pars.cpppath)
	env.Append(CPPDEFINES = pars.defines)
	src = env.SetBuildPath(pars.target_dir, 'src', pars.sources)
	elf = env.Elf(    target_path + '.elf', src + env['PLATFORM_LIBRARY'])
	txt = env.ObjDump(target_path + '.txt', elf, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
	bin = env.ObjCopy(target_path + '.bin', elf)
	return elf, bin

class buildpars:
	env         = atEnv.NETX4000
	cpppath     = ['src/netx4000', 'src/netx4000/CA9', '#platform/src/netx4000']


def make_bootimage(pars):
	d = dict()
	for k, v in pars.HBOOTIMAGE_KNOWN_FILES.items():
		d[k] = v[0]
		
	bootimg = pars.env.HBootImage(
		pars.target_dir + '/' + pars.target_name,
		pars.xml_template,
		HBOOTIMAGE_KNOWN_FILES = d,
		HBOOTIMAGE_SNIPLIB_SEARCHPATHS = pars.HBOOTIMAGE_SNIPLIB_SEARCHPATHS,
		HBOOTIMAGE_INCLUDE_PATHS = pars.HBOOTIMAGE_INCLUDE_PATHS,
		#HBOOTIMAGE_VERBOSE = True
		)
	for v in pars.HBOOTIMAGE_KNOWN_FILES.values():
		pars.env.Depends(bootimg, v)
	return bootimg

#############################################################################################################
# DDR Test 
#############################################################################################################
class imgpars:
	env = env_netx4000_s_cr7
	target_dir = 'targets/netx4000/standalone'
	HBOOTIMAGE_SNIPLIB_SEARCHPATHS=['sniplib', 'ramtest/src/sniplib']
	HBOOTIMAGE_INCLUDE_PATHS=['ramtest/src/hboot']
 
 #available tests (CA9 to be tested per definition always with L1 and L2 cache) - test for CR7 L2C missing
imgpars.HBOOTIMAGE_KNOWN_FILES=dict({
 	'tElfCR7OpenFirewalls'    : elf_netx4000_cr7_openfirewalls,
 	'tElfCR7_l1c'             : elf_netx4000_s_cr7_cached,
 	'tElfCA9core0_l2c'        : elf_netx4000_s_ca9_core0_cached_l2,
 	'tElfCA9core1_l1c'        : elf_netx4000_s_ca9_core1_cached,
	'tElfCR7_l1c_ecc' 		  :	elf_netx4000_s_cr7_llram_l1c_ecc,
	'tElfCA9core0_l2c_ecc'	  :	elf_netx4000_s_ca9_intram_rap0_l2c_ecc,
	'tElfCA9core1_l1c_ecc'	  :	elf_netx4000_s_ca9_intram_rap1_l1c_ecc,
	'tElfCR7_l1c_ecc_trigger' :	elf_netx4000_s_llram_cr7_l1c_ecc_trigger,
 	})
	
	
	#Frequency_ECC_core(s)_memorytype
	#NAME der bin datei								#eingezogene xml
aDDRTests = (
	('600MHz_noECC_CR7_AS4C512M16D3L-12',  			'600MHz_noECC_CR7_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('600MHz_noECC_CR7_IS43TR16256AL-125KBLI',  	'600MHz_noECC_CR7_nxhx4000_r3_IS43TR16256AL-125KBLI_ddr3.xml'),
	('600MHz_noECC_CA9_AS4C512M16D3L-12',  			'600MHz_noECC_CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('600MHz_noECC_CA9_IS43TR16256AL-125KBLI',  	'600MHz_noECC_CA9_nxhx4000_r3_IS43TR16256AL-125KBLI_ddr3.xml'), 
	('600MHz_noECC_CR7-CA9_AS4C512M16D3L-12',  		'600MHz_noECC_CR7-CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('600MHz_noECC_CR7-CA9_IS43TR16256AL-125KBLI',  '600MHz_noECC_CR7-CA9_nxhx4000_r3_IS43TR16256AL-125KBLI_ddr3.xml'),
	('400MHz_noECC_CR7_AS4C512M16D3L-12',  			'400MHz_noECC_CR7_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('400MHz_noECC_CR7_IS43TR16256AL-125KBLI',  	'400MHz_noECC_CR7_nxhx4000_r3_IS43TR16256AL-125KBLI_ddr3.xml'),
	('400MHz_noECC_CA9_AS4C512M16D3L-12',  			'400MHz_noECC_CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('400MHz_noECC_CA9_IS43TR16256AL-125KBLI',  	'400MHz_noECC_CA9_nxhx4000_r3_IS43TR16256AL-125KBLI_ddr3.xml'), 
	('400MHz_noECC_CR7-CA9_AS4C512M16D3L-12',  		'400MHz_noECC_CR7-CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('400MHz_noECC_CR7-CA9_IS43TR16256AL-125KBLI', 	'400MHz_noECC_CR7-CA9_nxhx4000_r3_IS43TR16256AL-125KBLI_ddr3.xml'),
	('600MHz_halfDP_CR7_AS4C512M16D3L-12',  		'600MHz_halfDP_CR7_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('600MHz_halfDP_CA9_AS4C512M16D3L-12',  		'600MHz_halfDP_CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('600MHz_halfDP_CR7-CA9_AS4C512M16D3L-12',  	'600MHz_halfDP_CR7-CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('400MHz_halfDP_CR7_AS4C512M16D3L-12',  		'400MHz_halfDP_CR7_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('400MHz_halfDP_CA9_AS4C512M16D3L-12',  		'400MHz_halfDP_CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('400MHz_halfDP_CR7-CA9_AS4C512M16D3L-12',  	'400MHz_halfDP_CR7-CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
    ('600MHz_ECC_CR7_AS4C512M16D3L-12',  			'600MHz_ECC_CR7_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
    ('600MHz_ECC_CR7_IS43TR16256AL-125KBLI',		'600MHz_ECC_CR7_nxhx4000_r3_IS43TR16256AL-125KBLI_ddr3.xml'),
	('600MHz_ECC_CA9_AS4C512M16D3L-12',  			'600MHz_ECC_CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('600MHz_ECC_CA9_IS43TR16256AL-125KBLI',  		'600MHz_ECC_CA9_nxhx4000_r3_IS43TR16256AL-125KBLI_ddr3.xml'), 
	('600MHz_ECC_CR7-CA9_AS4C512M16D3L-12',  		'600MHz_ECC_CR7-CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('600MHz_ECC_CR7-CA9_IS43TR16256AL-125KBLI', 	'600MHz_ECC_CR7-CA9_nxhx4000_r3_IS43TR16256AL-125KBLI_ddr3.xml'),
	('400MHz_ECC_CR7_AS4C512M16D3L-12',  			'400MHz_ECC_CR7_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('400MHz_ECC_CR7_IS43TR16256AL-125KBLI', 		'400MHz_ECC_CR7_nxhx4000_r3_IS43TR16256AL-125KBLI_ddr3.xml'),
	('400MHz_ECC_CA9_AS4C512M16D3L-12',  			'400MHz_ECC_CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('400MHz_ECC_CA9_IS43TR16256AL-125KBLI',  		'400MHz_ECC_CA9_nxhx4000_r3_IS43TR16256AL-125KBLI_ddr3.xml'), 
	('400MHz_ECC_CR7-CA9_AS4C512M16D3L-12',  		'400MHz_ECC_CR7-CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('400MHz_ECC_CR7-CA9_IS43TR16256AL-125KBLI', 	'400MHz_ECC_CR7-CA9_nxhx4000_r3_IS43TR16256AL-125KBLI_ddr3.xml'),
    ('ECCTEST_ecc_check_on_in_snippet_off',  		'ECCTEST_ecc_check_on_in_snippet_off.xml'),	
	('600MHz_ECC_trigger_CR7_AS4C512M16D3L-12',		'600MHz_ECC_trigger_CR7_nxhx4000_r3_AS4C512M16D3L-12_ddr3.xml'),
	('halfDP_only_sequence_count',	 	  			'halfDP_only_sequence_count.xml'),	
	('600MHz_noECC_CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3_1GB_no_tags',	 	  			'600MHz_noECC_CA9_nxhx4000_r3_AS4C512M16D3L-12_ddr3_1GB_no_tags.xml'),	
 ) 

 
 
for tEntry in aDDRTests:
 	imgpars.target_name = 'test_ddr/ramtest_standalone_nxhx4000_r3_ddr3_%s.bin' % tEntry[0]
 	imgpars.xml_template = 'src/netx4000/nxhx4000/%s' % tEntry[1]
 	print imgpars.xml_template, " ==> ", imgpars.target_name
 	make_bootimage(imgpars)
	


	




