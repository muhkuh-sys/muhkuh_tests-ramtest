# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2012 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Import all required objects.
#
Import('env_default')
Import('env_netx4000_default', 'env_netx500_default', 'env_netx56_default', 'env_netx50_default', 'env_netx10_default')
Import('platform_lib_netx4000', 'platform_lib_netx500', 'platform_lib_netx56', 'platform_lib_netx50', 'platform_lib_netx10')


#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
sources_common = """
	src/header.c
	src/ramtest.c
	src/random_burst.s
	src/ramtest_perf.c
	src/performance_test.S
"""


sources_test = """
	src/init_netx_test.S
	src/main_test.c
	src/netx_test.c
"""


sources_standalone = """
	src/init_standalone.S
	src/main_standalone.c
"""


sources_debugger = """
	src/init_debugger.S
	src/main_standalone.c
"""

sources_sim = """
	src/init_simu.S
	src/main_simu.c
	src/setup_sdram.c
	src/ramtest_perf.c
	src/performance_test.S
"""

# special files for netX 4000 bootup
sources_cr7_openfirewalls = """
	src/netx4000/cr7_open_netx4000_firewalls.S
"""

#----------------------------------------------------------------------------
#
# Build the muhkuh test version.
#
aCppPath = ['src', '#platform/src', '#platform/src/lib', '#targets/version']




env_netx4000_t = env_netx4000_default.Clone()
env_netx4000_t.Replace(LDFILE = 'src/netx4000/netx4000_cr7_intram.ld')
env_netx4000_t.Append(CPPPATH = aCppPath)
src_netx4000_t = env_netx4000_t.SetBuildPath('targets/netx4000/muhkuh_test', 'src', sources_common+sources_test)
elf_netx4000_t = env_netx4000_t.Elf('targets/netx4000/muhkuh_test/ramtest.elf', src_netx4000_t + platform_lib_netx4000)
ramtest_netx4000 = env_netx4000_t.ObjCopy('targets/netx4000/muhkuh_test/ramtest_netx4000.bin', elf_netx4000_t)

env_netx500_t = env_netx500_default.Clone()
env_netx500_t.Replace(LDFILE = 'src/netx500/netx500.ld')
env_netx500_t.Append(CPPPATH = aCppPath)
src_netx500_t = env_netx500_t.SetBuildPath('targets/netx500/muhkuh_test', 'src', sources_common+sources_test)
elf_netx500_t = env_netx500_t.Elf('targets/netx500/muhkuh_test/ramtest.elf', src_netx500_t + platform_lib_netx500)
ramtest_netx500 = env_netx500_t.ObjCopy('targets/netx500/muhkuh_test/ramtest_netx500.bin', elf_netx500_t)

env_netx500_sim = env_netx500_default.Clone()
env_netx500_sim.Replace(LDFILE = 'src/netx500/netx500.ld')
env_netx500_sim.Append(CPPPATH = aCppPath)
env_netx500_sim.Append(CPPDEFINES = [['SIMULATION', '1']])
src_netx500_sim = env_netx500_sim.SetBuildPath('targets/netx500/sim', 'src',  sources_sim)
elf_netx500_sim = env_netx500_sim.Elf('targets/netx500/sim/ramtest_netx500.elf', src_netx500_sim + platform_lib_netx500)
ramtest_netx500_sim = env_netx500_sim.ObjCopy('targets/netx500/sim/ramtest_netx500.bin', elf_netx500_sim)

env_netx56_t = env_netx56_default.Clone()
env_netx56_t.Replace(LDFILE = 'src/netx56/netx56.ld')
env_netx56_t.Append(CPPPATH = aCppPath)
src_netx56_t = env_netx56_t.SetBuildPath('targets/netx56/muhkuh_test', 'src', sources_common+sources_test)
elf_netx56_t = env_netx56_t.Elf('targets/netx56/muhkuh_test/ramtest.elf', src_netx56_t + platform_lib_netx56)
ramtest_netx56 = env_netx56_t.ObjCopy('targets/netx56/muhkuh_test/ramtest_netx56.bin', elf_netx56_t)

env_netx50_t = env_netx50_default.Clone()
env_netx50_t.Replace(LDFILE = 'src/netx50/netx50.ld')
env_netx50_t.Append(CPPPATH = aCppPath)
src_netx50_t = env_netx50_t.SetBuildPath('targets/netx50/muhkuh_test', 'src', sources_common+sources_test)
elf_netx50_t = env_netx50_t.Elf('targets/netx50/muhkuh_test/ramtest.elf', src_netx50_t + platform_lib_netx50)
ramtest_netx50 = env_netx50_t.ObjCopy('targets/netx50/muhkuh_test/ramtest_netx50.bin', elf_netx50_t)

env_netx10_t = env_netx10_default.Clone()
env_netx10_t.Replace(LDFILE = 'src/netx10/netx10.ld')
env_netx10_t.Append(CPPPATH = aCppPath)
src_netx10_t = env_netx10_t.SetBuildPath('targets/netx10/muhkuh_test', 'src', sources_common+sources_test)
elf_netx10_t = env_netx10_t.Elf('targets/netx10/muhkuh_test/ramtest.elf', src_netx10_t + platform_lib_netx10)
ramtest_netx10 = env_netx10_t.ObjCopy('targets/netx10/muhkuh_test/ramtest_netx10.bin', elf_netx10_t)

Export('ramtest_netx4000', 'ramtest_netx500', 'ramtest_netx56', 'ramtest_netx50', 'ramtest_netx10')


#----------------------------------------------------------------------------
#
# Build the standalone version.
#

# open firewalls from RAP into netX area at netX 4000
env_netx4000_cr7_openfirewalls = env_netx4000_default.Clone()
env_netx4000_cr7_openfirewalls.Replace(LDFILE = 'src/netx4000/netx4000_cr7_intram.ld')
env_netx4000_cr7_openfirewalls.Append(CPPPATH = aCppPath)
src_netx4000_cr7_openfirewalls = env_netx4000_cr7_openfirewalls.SetBuildPath('targets/netx4000_openfirewalls', 'src', sources_cr7_openfirewalls)
elf_netx4000_cr7_openfirewalls = env_netx4000_cr7_openfirewalls.Elf('targets/netx4000_openfirewalls/netx4000_cr7_openfirewalls.elf', src_netx4000_cr7_openfirewalls + platform_lib_netx4000)
txt_netx4000_cr7_openfirewalls = env_netx4000_cr7_openfirewalls.ObjDump('targets/netx4000_openfirewalls/netx4000_cr7_openfirewalls.txt', elf_netx4000_cr7_openfirewalls, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])

# ramtest for the CR7.
env_netx4000_ramtest_cr7 = env_netx4000_default.Clone()
env_netx4000_ramtest_cr7.Replace(LDFILE = 'src/netx4000/netx4000_cr7_intram.ld')
env_netx4000_ramtest_cr7.Append(CPPPATH = aCppPath)
src_netx4000_ramtest_cr7 = env_netx4000_ramtest_cr7.SetBuildPath('targets/netx4000_cr7', 'src', sources_common+sources_standalone)
elf_netx4000_ramtest_cr7 = env_netx4000_ramtest_cr7.Elf('targets/netx4000_cr7/netx4000_ramtest_cr7.elf', src_netx4000_ramtest_cr7 + platform_lib_netx4000)
txt_netx4000_ramtest_cr7 = env_netx4000_ramtest_cr7.ObjDump('targets/netx4000_cr7/netx4000_ramtest_cr7.txt', elf_netx4000_ramtest_cr7, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])

# ramtest for one of the CA9 cores.
env_netx4000_ramtest_ca9 = env_netx4000_default.Clone()
env_netx4000_ramtest_ca9.Replace(LDFILE = 'src/netx4000/netx4000_ca9_intram.ld')
env_netx4000_ramtest_ca9.Append(CPPPATH = aCppPath)
env_netx4000_ramtest_ca9.Append(CPPPATH = ['src/netx4000'])
env_netx4000_ramtest_ca9.Append(CPPDEFINES = [['CFG_USE_RAP_UART', '1']])
src_netx4000_ramtest_ca9 = env_netx4000_ramtest_ca9.SetBuildPath('targets/netx4000_ca9', 'src', sources_common+sources_standalone)
elf_netx4000_ramtest_ca9 = env_netx4000_ramtest_ca9.Elf('targets/netx4000_ca9/netx4000_ramtest_ca9.elf', src_netx4000_ramtest_ca9 + platform_lib_netx4000)
txt_netx4000_ramtest_ca9 = env_netx4000_ramtest_ca9.ObjDump('targets/netx4000_ca9/netx4000_ramtest_ca9.txt', elf_netx4000_ramtest_ca9, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])

# Build 3 hboot images to be loaded into netX 4000
# hboot image: RUN ramtest at CR7
bb0_netx4000_intram = env_netx4000_ramtest_cr7.HBootImage('targets/ramtest_netx4000_cr7_spi_intram.bin', 'src/netx4000/CR7_to_INTRAM.xml', KNOWN_FILES=dict({'tElfCR7': elf_netx4000_ramtest_cr7[0]}))
bb1_netx4000_intram = env_netx4000_ramtest_cr7.HBootImage('targets/mmc/netx4000/cr7/netx.rom', 'src/netx4000/CR7_to_INTRAM.xml', KNOWN_FILES=dict({'tElfCR7': elf_netx4000_ramtest_cr7[0]}))

# hboot image: open firewalls from RAP into netX area; RUN ramtest at CR9 core 0; keep CR7 inside endless loop
bb2_netx4000_intram = env_netx4000_ramtest_ca9.HBootImage('targets/ramtest_netx4000_ca9core0_spi_intram.bin', 'src/netx4000/CA9core0_to_INTRAM.xml', KNOWN_FILES=dict({'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls[0], 'tElfCA9core0': elf_netx4000_ramtest_ca9[0]}))
bb3_netx4000_intram = env_netx4000_ramtest_ca9.HBootImage('targets/mmc/netx4000/ca9core0/netx.rom', 'src/netx4000/CA9core0_to_INTRAM.xml', KNOWN_FILES=dict({'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls[0], 'tElfCA9core0': elf_netx4000_ramtest_ca9[0]}))

# hboot image: open firewalls from RAP into netX area; RUN ramtest at CR9 core 1; keep CR7 inside endless loop
bb4_netx4000_intram = env_netx4000_ramtest_ca9.HBootImage('targets/ramtest_netx4000_ca9core1_spi_intram.bin', 'src/netx4000/CA9core1_to_INTRAM.xml', KNOWN_FILES=dict({'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls[0], 'tElfCA9core1': elf_netx4000_ramtest_ca9[0]}))
bb5_netx4000_intram = env_netx4000_ramtest_ca9.HBootImage('targets/mmc/netx4000/ca9core1/netx.rom', 'src/netx4000/CA9core1_to_INTRAM.xml', KNOWN_FILES=dict({'tElfCR7OpenFirewalls': elf_netx4000_cr7_openfirewalls[0], 'tElfCA9core1': elf_netx4000_ramtest_ca9[0]}))



#
# Build the standalone version.
#
#env_netx4000_s = env_netx4000_default.Clone()
#env_netx4000_s.Replace(LDFILE = 'src/netx4000/netx4000.ld')
#env_netx4000_s.Append(CPPPATH = aCppPath)
#src_netx4000_s = env_netx4000_s.SetBuildPath('targets/netx4000/standalone', 'src', sources_common+sources_standalone)
#elf_netx4000_s = env_netx4000_s.Elf('targets/netx4000/standalone/ramtest_netx4000.elf', src_netx4000_s + platform_lib_netx4000)
#ramtest_standalone_netx4000 = env_netx4000_s.HBootImage('targets/netx4000/standalone/ramtest_standalone_netx4000.bin', 'src/netx4000/DEFAULT_to_INTRAM.xml', KNOWN_FILES=dict({'tElf': elf_netx4000_s[0]}))


env_netx500_s = env_netx500_default.Clone()
env_netx500_s.Replace(LDFILE = 'src/netx500/netx500.ld')
env_netx500_s.Append(CPPPATH = aCppPath)
src_netx500_s = env_netx500_s.SetBuildPath('targets/netx500/standalone', 'src', sources_common+sources_standalone)
elf_netx500_s = env_netx500_s.Elf('targets/netx500/standalone/ramtest_netx500.elf', src_netx500_s + platform_lib_netx500)
ramtest_standalone_netx500 = env_netx500_s.BootBlock('targets/netx500/standalone/ramtest_standalone_netx500.bin', elf_netx500_s, BOOTBLOCK_SRC={}, BOOTBLOCK_DST={})


env_netx56_s = env_netx56_default.Clone()
env_netx56_s.Replace(LDFILE = 'src/netx56/netx56.ld')
env_netx56_s.Append(CPPPATH = aCppPath)
src_netx56_s = env_netx56_s.SetBuildPath('targets/netx56/standalone', 'src', sources_common+sources_standalone)
elf_netx56_s = env_netx56_s.Elf('targets/netx56/standalone/ramtest_netx56.elf', src_netx56_s + platform_lib_netx56)
ramtest_standalone_netx56 = env_netx56_s.BootBlock('targets/netx56/standalone/ramtest_standalone_netx56.bin', elf_netx56_s, BOOTBLOCK_SRC={}, BOOTBLOCK_DST={})


env_netx50_s = env_netx50_default.Clone()
env_netx50_s.Replace(LDFILE = 'src/netx50/netx50.ld')
env_netx50_s.Append(CPPPATH = aCppPath)
src_netx50_s = env_netx50_s.SetBuildPath('targets/netx50/standalone', 'src', sources_common+sources_standalone)
elf_netx50_s = env_netx50_s.Elf('targets/netx50/standalone/ramtest_netx50.elf', src_netx50_s + platform_lib_netx50)
ramtest_standalone_netx50 = env_netx50_s.BootBlock('targets/netx50/standalone/ramtest_standalone_netx50.bin', elf_netx50_s, BOOTBLOCK_SRC={}, BOOTBLOCK_DST={})


env_netx10_s = env_netx10_default.Clone()
env_netx10_s.Replace(LDFILE = 'src/netx10/netx10.ld')
env_netx10_s.Append(CPPPATH = aCppPath)
src_netx10_s = env_netx10_s.SetBuildPath('targets/netx10/standalone', 'src', sources_common+sources_standalone)
elf_netx10_s = env_netx10_s.Elf('targets/netx10/standalone/ramtest_netx10.elf', src_netx10_s + platform_lib_netx10)
ramtest_standalone_netx10 = env_netx10_s.BootBlock('targets/netx10/standalone/ramtest_standalone_netx10.bin', elf_netx10_s, BOOTBLOCK_SRC={}, BOOTBLOCK_DST={})

Export('ramtest_standalone_netx500', 'ramtest_standalone_netx56', 'ramtest_standalone_netx50', 'ramtest_standalone_netx10')
#Export('ramtest_standalone_netx4000')


#----------------------------------------------------------------------------
#
# Build the debugger version.
#
env_netx500_d = env_netx500_default.Clone()
env_netx500_d.Replace(LDFILE = 'src/netx500/netx500.ld')
env_netx500_d.Append(CPPPATH = aCppPath)
src_netx500_d = env_netx500_d.SetBuildPath('targets/netx500/debugger', 'src', sources_common+sources_debugger)
elf_netx500_d = env_netx500_d.Elf('targets/netx500/debugger/ramtest_netx500.elf', src_netx500_d + platform_lib_netx500)

